// ==========================================================
// File: index.js (Backend v·ªõi Gemini API)
// ==========================================================

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');

// ==========================================================
// TH√äM: Import SDK Gemini API
// ==========================================================
const { GoogleGenerativeAI } = require('@google/generative-ai');

// N·∫°p c√°c file route
const couponRoutes = require('./routes/coupon.routes');
const orderRoutes = require('./routes/order.routes');
const customerRoutes = require('./routes/customer.routes');
const syncRoutes = require('./routes/sync.routes');
const webhookRoutes = require('./routes/webhook.routes');
// const cronRoutes = require('./routes/cron.routes'); // <-- T·∫°m th·ªùi v√¥ hi·ªáu h√≥a d√≤ng n√†y

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng Express
const app = express();
const PORT = process.env.PORT || 3001;

// --- Middleware ---
app.use(cors());
app.use(express.json());

// ==========================================================
// TH√äM: C·∫•u h√¨nh Gemini API v√† Route m·ªõi
// ==========================================================
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

if (!GEMINI_API_KEY) {
    console.warn("C·∫£nh b√°o: Bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. T√≠nh nƒÉng AI s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.");
    // Kh√¥ng tho√°t ·ª©ng d·ª•ng, ch·ªâ c·∫£nh b√°o ƒë·ªÉ c√°c API kh√°c v·∫´n ho·∫°t ƒë·ªông
} else {
    const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });

    // ƒê·ªãnh nghƒ©a endpoint m·ªõi cho ph√¢n t√≠ch marketing AI
    app.post('/api/analyze-marketing', async (req, res) => {
        // L·∫•y d·ªØ li·ªáu t·ª´ body c·ªßa request frontend
        const { totalRevenue, totalDiscount, totalOrdersWithDiscount, couponUsageData, revenueByCouponData, topCustomers, orders, customers, coupons } = req.body;

        if (!req.body || Object.keys(req.body).length === 0) {
            return res.status(400).json({ error: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p cho ph√¢n t√≠ch AI." });
        }

        // X√¢y d·ª±ng prompt cho Gemini
        const promptParts = [
            "B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch marketing v√† chi·∫øn l∆∞·ª£c gia.",
            "H√£y ph√¢n t√≠ch d·ªØ li·ªáu marketing sau ƒë√¢y v√† ƒë∆∞a ra c√°c insight s√¢u s·∫Øc, ƒë·ªÅ xu·∫•t c√°c th·ª≠ nghi·ªám marketing A/B m·ªõi, c√°c √Ω t∆∞·ªüng chi·∫øn d·ªãch marketing, v√† c√°c ch·ªß ƒë·ªÅ/n·ªôi dung email marketing h·∫•p d·∫´n.",
            "D·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p l√†:",
            `- T·ªïng doanh thu t·ª´ ƒë∆°n h√†ng c√≥ m√£ gi·∫£m gi√°: ${totalRevenue} VND`,
            `- T·ªïng s·ªë ƒë∆°n h√†ng c√≥ m√£ gi·∫£m gi√°: ${totalOrdersWithDiscount}`,
            `- T·ªïng ti·ªÅn ƒë√£ gi·∫£m gi√°: ${totalDiscount} VND`,
            "\nChi ti·∫øt l∆∞·ª£t s·ª≠ d·ª•ng m√£ gi·∫£m gi√°:",
            "M√£ | S·ªë l∆∞·ª£t s·ª≠ d·ª•ng",
            "---|----------------",
            ...couponUsageData.map(item => `${item.name} | ${item['S·ªë l∆∞·ª£t s·ª≠ d·ª•ng']}`),
            "\nDoanh thu theo m√£ gi·∫£m gi√°:",
            "M√£ | Doanh thu",
            "---|-----------",
            ...revenueByCouponData.map(item => `${item.name} | ${item.value}`),
            "\nKh√°ch h√†ng th√¢n thi·∫øt (top 5 theo s·ªë l∆∞·ª£t d√πng m√£):",
            "Kh√°ch h√†ng | L∆∞·ª£t d√πng m√£",
            "------------|-------------",
            ...topCustomers.map(item => `${item.name} | ${item.usageCount}`),
            "\n",
            "H√£y tr√¨nh b√†y k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng sau:",
            "Insight t·ª´ AI:",
            "<C√°c insight t·ªïng quan v·ªÅ hi·ªáu su·∫•t m√£ gi·∫£m gi√°, xu h∆∞·ªõng kh√°ch h√†ng, v.v.>",
            "\nTh·ª≠ nghi·ªám ƒë·ªÅ xu·∫•t (v√≠ d·ª•: A/B testing):",
            "- <Th·ª≠ nghi·ªám 1>",
            "- <Th·ª≠ nghi·ªám 2>",
            "\nChi·∫øn d·ªãch ƒë·ªÅ xu·∫•t:",
            "- <Chi·∫øn d·ªãch 1 (M·ª•c ti√™u, ƒê·ªëi t∆∞·ª£ng, √ù t∆∞·ªüng)>",
            "- <Chi·∫øn d·ªãch 2>",
            "\nEmail Marketing ƒë·ªÅ xu·∫•t (ch·ªß ƒë·ªÅ v√† n·ªôi dung ch√≠nh):",
            "- <Ch·ªß ƒë·ªÅ Email 1: N·ªôi dung ch√≠nh>",
            "- <Ch·ªß ƒë·ªÅ Email 2: N·ªôi dung ch√≠nh>",
            "\n",
            "H√£y ƒë·∫£m b·∫£o ph√¢n t√≠ch c·ªßa b·∫°n th·ª±c t·∫ø v√† d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ cho. N·∫øu c√≥ b·∫•t k·ª≥ ƒëi·ªÅu g√¨ kh√¥ng r√µ r√†ng, h√£y ƒë∆∞a ra gi·∫£ ƒë·ªãnh h·ª£p l√Ω ho·∫∑c n√™u r√µ h·∫°n ch·∫ø c·ªßa d·ªØ li·ªáu."
        ];

        try {
            const result = await model.generateContent(promptParts);
            const response = await result.response;
            const textResponse = response.text();

            // Ph√¢n t√≠ch ph·∫£n h·ªìi vƒÉn b·∫£n t·ª´ Gemini ƒë·ªÉ tr√≠ch xu·∫•t c√°c ph·∫ßn c·∫ßn thi·∫øt
            let insights = "";
            let experiments = [];
            let campaigns = [];
            let emails = [];

            if (textResponse) {
                const parts = textResponse.split('\n');
                let currentSection = '';
                for (const line of parts) {
                    if (line.startsWith('Insight t·ª´ AI:')) {
                        currentSection = 'insights';
                        insights = ''; // Reset insight cho ph·∫ßn m·ªõi
                    } else if (line.startsWith('Th·ª≠ nghi·ªám ƒë·ªÅ xu·∫•t:')) {
                        currentSection = 'experiments';
                    } else if (line.startsWith('Chi·∫øn d·ªãch ƒë·ªÅ xu·∫•t:')) {
                        currentSection = 'campaigns';
                    } else if (line.startsWith('Email Marketing ƒë·ªÅ xu·∫•t:')) {
                        currentSection = 'emails';
                    } else if (line.startsWith('- ')) {
                        const content = line.substring(2).trim();
                        if (currentSection === 'experiments') experiments.push(content);
                        else if (currentSection === 'campaigns') campaigns.push(content);
                        else if (currentSection === 'emails') emails.push(content);
                    } else if (currentSection === 'insights' && line.trim() !== '') {
                        insights += line.trim() + '\n';
                    }
                }
                insights = insights.trim(); // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a cu·ªëi c√πng
            }
            
            res.json({
                insights: insights,
                experiments: experiments,
                campaigns: campaigns,
                emails: emails
            });

        } catch (error) {
            console.error('L·ªói khi g·ªçi Gemini API:', error);
            res.status(500).json({ error: 'Failed to get AI analysis', details: error.message });
        }
    });
}


// --- S·ª≠ d·ª•ng c√°c route ---
app.use('/api', couponRoutes);
app.use('/api', orderRoutes);
app.use('/api', customerRoutes);
app.use('/api', syncRoutes);
app.use('/api', webhookRoutes);
// app.use('/api', cronRoutes); // <-- T·∫°m th·ªùi v√¥ hi·ªáu h√≥a d√≤ng n√†y

// --- K·∫æT N·ªêI DATABASE V√Ä KH·ªûI ƒê·ªòNG SERVER ---
const MONGO_URI = process.env.MONGO_URI;

if (!MONGO_URI) {
    console.error("L·ªói: Bi·∫øn m√¥i tr∆∞·ªùng MONGO_URI ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong file .env");
    process.exit(1);
}

mongoose.connect(MONGO_URI)
    .then(() => {
        console.log("‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn MongoDB Atlas!");
        // Ch·ªâ kh·ªüi ƒë·ªông server sau khi ƒë√£ k·∫øt n·ªëi database th√†nh c√¥ng
        app.listen(PORT, () => {
            console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
        });
    })
    .catch(err => {
        console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err.message);
        process.exit(1);
    });