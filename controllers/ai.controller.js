// ==========================================================
// File: controllers/ai.controller.js
// Nhi·ªám v·ª•: Chu·∫©n b·ªã d·ªØ li·ªáu, t·∫°o prompt v√† g·ªçi service AI.
// ==========================================================

const Order = require('../models/order.model');
const Customer = require('../models/customer.model');
const geminiService = require('../services/gemini.service');

/**
 * Controller ƒë·ªÉ nh·∫≠n y√™u c·∫ßu ph√¢n t√≠ch, x·ª≠ l√Ω v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ AI.
 */
async function analyzeBusinessData(req, res) {
  console.log('ü§ñ [AI] Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ph√¢n t√≠ch...');
  try {
    // B∆∞·ªõc 1: L·∫•y to√†n b·ªô d·ªØ li·ªáu c·∫ßn thi·∫øt t·ª´ database
    const [orders, customers] = await Promise.all([
      Order.find({ financial_status: 'paid' }).sort({ created_at_haravan: -1 }).limit(100), // L·∫•y 100 ƒë∆°n h√†ng g·∫ßn nh·∫•t
      Customer.find({}).sort({ total_spent: -1 }).limit(50) // L·∫•y 50 kh√°ch h√†ng chi ti√™u nhi·ªÅu nh·∫•t
    ]);

    // B∆∞·ªõc 2: T·∫°o m·ªôt c√¢u l·ªánh (prompt) chi ti·∫øt cho AI
    const prompt = `
      L√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu b√°n l·∫ª cho m·ªôt c·ª≠a h√†ng nh·ªè, h√£y ph√¢n t√≠ch d·ªØ li·ªáu sau:
      - T·ªïng s·ªë ƒë∆°n h√†ng ƒë√£ thanh to√°n: ${orders.length}
      - T·ªïng s·ªë kh√°ch h√†ng: ${customers.length}
      - D·ªØ li·ªáu 5 ƒë∆°n h√†ng g·∫ßn nh·∫•t: ${JSON.stringify(orders.slice(0, 5), null, 2)}
      - D·ªØ li·ªáu 5 kh√°ch h√†ng chi ti√™u nhi·ªÅu nh·∫•t: ${JSON.stringify(customers.slice(0, 5), null, 2)}

      D·ª±a v√†o d·ªØ li·ªáu tr√™n, h√£y ƒë∆∞a ra:
      1. **Ba (3) nh·∫≠n ƒë·ªãnh ch√≠nh** v·ªÅ h√†nh vi mua s·∫Øm c·ªßa kh√°ch h√†ng.
      2. **Hai (2) ƒë·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c c·ª• th·ªÉ** cho th√°ng t·ªõi.
      3. **Hai (2) m√£ gi·∫£m gi√° th·ª≠ nghi·ªám (A/B testing)** m√† t√¥i c√≥ th·ªÉ t·∫°o ra, bao g·ªìm: code, lo·∫°i gi·∫£m gi√°, gi√° tr·ªã, v√† l√Ω do t·∫°i sao n√™n th·ª≠ nghi·ªám m√£ ƒë√≥.

      H√£y tr√¨nh b√†y k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng markdown r√µ r√†ng.
    `;

    // B∆∞·ªõc 3: G·ªçi service ƒë·ªÉ g·ª≠i prompt ƒë·∫øn Gemini
    const analysisResult = await geminiService.getAnalysisFromAI(prompt);

    // B∆∞·ªõc 4: Tr·∫£ k·∫øt qu·∫£ v·ªÅ cho frontend
    res.status(200).json({ analysis: analysisResult });

  } catch (error) {
    res.status(500).json({ message: 'L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch AI.', error: error.message });
  }
}

module.exports = {
  analyzeBusinessData
};
