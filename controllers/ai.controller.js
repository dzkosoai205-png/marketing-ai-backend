// ==========================================================
// File: controllers/ai.controller.js (C·∫≠p nh·∫≠t)
// Ch·ª©a c·∫£ 2 b·ªô n√£o AI cho K·∫ø to√°n v√† Khuy·∫øn m√£i.
// ==========================================================
const Order = require('../models/order.model');
const Customer = require('../models/customer.model');
const DailyReport = require('../models/dailyReport.model.js');
const geminiService = require('../services/gemini.service');

// --- B·ªò N√ÉO 1: PH√ÇN T√çCH B√ÅO C√ÅO K·∫æ TO√ÅN ---
async function analyzeDailyReport(req, res) {
  console.log('ü§ñ [AI] Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ph√¢n t√≠ch b√°o c√°o cu·ªëi ng√†y...');
  try {
    const latestReport = await DailyReport.findOne().sort({ createdAt: -1 });
    if (!latestReport) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o n√†o ƒë·ªÉ ph√¢n t√≠ch.' });
    }
    const reportDate = new Date(latestReport.report_date);
    const nextDay = new Date(reportDate);
    nextDay.setDate(reportDate.getDate() + 1);
    const todaysOrders = await Order.find({ created_at_haravan: { $gte: reportDate, $lt: nextDay } });
    const topProducts = {};
    const usedCoupons = {};
    todaysOrders.forEach(order => {
        order.line_items.forEach(item => { topProducts[item.title] = (topProducts[item.title] || 0) + item.quantity; });
        order.discount_codes.forEach(coupon => { if (coupon && coupon.code) { usedCoupons[coupon.code] = (usedCoupons[coupon.code] || 0) + 1; }});
    });
    const prompt = `L√† m·ªôt chuy√™n gia ph√¢n t√≠ch kinh doanh, h√£y ph√¢n t√≠ch k·∫øt qu·∫£ kinh doanh h√¥m nay v√† ƒë·ªÅ xu·∫•t k·∫ø ho·∫°ch cho ng√†y mai. D·ªØ li·ªáu: Doanh thu: ${latestReport.total_revenue.toLocaleString('vi-VN')}ƒë, L·ª£i nhu·∫≠n: ${latestReport.total_profit.toLocaleString('vi-VN')}ƒë, Ghi ch√∫: ${latestReport.notes || 'Kh√¥ng c√≥'}, Top s·∫£n ph·∫©m b√°n ch·∫°y: ${JSON.stringify(Object.entries(topProducts).sort((a, b) => b[1] - a[1]).slice(0, 5))}, M√£ gi·∫£m gi√° ƒë√£ d√πng: ${JSON.stringify(usedCoupons)}. Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON c√≥ c·∫•u tr√∫c: {"summary": "T√≥m t·∫Øt (2-3 c√¢u) v·ªÅ t√¨nh h√¨nh kinh doanh h√¥m nay.", "insights": ["Nh·∫≠n ƒë·ªãnh 1 v·ªÅ doanh thu/l·ª£i nhu·∫≠n.", "Nh·∫≠n ƒë·ªãnh 2 v·ªÅ s·∫£n ph·∫©m/m√£ gi·∫£m gi√°."],"recommendations": [{"action": "ƒê·ªÅ xu·∫•t h√†nh ƒë·ªông 1.", "details": "Chi ti·∫øt h√†nh ƒë·ªông 1.", "reason": "L√Ω do." }, { "action": "ƒê·ªÅ xu·∫•t h√†nh ƒë·ªông 2.", "details": "Chi ti·∫øt h√†nh ƒë·ªông 2.", "reason": "L√Ω do." }]}`;
    const analysisResultText = await geminiService.getAnalysisFromAI(prompt);
    const jsonString = analysisResultText.replace(/```json\n|```/g, '').trim();
    const analysisResultJson = JSON.parse(jsonString);
    res.status(200).json(analysisResultJson);
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch AI K·∫ø to√°n:', error);
    res.status(500).json({ message: 'L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch AI K·∫ø to√°n.', error: error.message });
  }
}

// --- B·ªò N√ÉO 2: PH√ÇN T√çCH D·ªÆ LI·ªÜU KHUY·∫æN M√ÉI ---
async function analyzePromoData(req, res) {
  console.log('ü§ñ [AI] Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ph√¢n t√≠ch khuy·∫øn m√£i...');
  try {
    const [orders, customers] = await Promise.all([
      Order.find({ financial_status: 'paid' }).sort({ created_at_haravan: -1 }).limit(200),
      Customer.find({}).sort({ total_spent: -1 }).limit(50)
    ]);
    const prompt = `L√† m·ªôt chuy√™n gia marketing e-commerce, h√£y ph√¢n t√≠ch d·ªØ li·ªáu sau c·ªßa m·ªôt c·ª≠a h√†ng b√°n ƒë·ªì anime v√† tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON: D·ªØ li·ªáu 10 ƒë∆°n h√†ng g·∫ßn nh·∫•t c√≥ m√£ gi·∫£m gi√°: ${JSON.stringify(orders.filter(o => o.discount_codes.length > 0).slice(0, 10).map(o => ({total_price: o.total_price, discount_codes: o.discount_codes, customer_email: o.email})))}, D·ªØ li·ªáu 5 kh√°ch h√†ng chi ti√™u nhi·ªÅu nh·∫•t: ${JSON.stringify(customers.slice(0, 5).map(c => ({total_spent: c.total_spent, orders_count: c.orders_count, email: c.email})))}. C·∫•u tr√∫c JSON tr·∫£ v·ªÅ: {"insights": ["Nh·∫≠n ƒë·ªãnh 1 v·ªÅ lo·∫°i m√£ gi·∫£m gi√° hi·ªáu qu·∫£.", "Nh·∫≠n ƒë·ªãnh 2 v·ªÅ nh√≥m kh√°ch h√†ng ph·∫£n ·ª©ng t·ªët v·ªõi khuy·∫øn m√£i."],"campaign_plan": {"event_name": "Chi·∫øn d·ªãch cho ng√†y Sale L·ªõn s·∫Øp t·ªõi","target_audience": "M√¥ t·∫£ nh√≥m kh√°ch h√†ng m·ª•c ti√™u.","suggestions": [{ "code": "BIGSALE_CODE", "description": "M√¥ t·∫£ chi ti·∫øt m√£.", "reason": "L√Ω do ƒë·ªÅ xu·∫•t." }]},"ab_testing": [{ "code": "TEST_CODE_A", "description": "M√¥ t·∫£ chi ti·∫øt m√£ th·ª≠ nghi·ªám A.", "reason": "L√Ω do v√† gi·∫£ thuy·∫øt th·ª≠ nghi·ªám." }]}`;
    const analysisResultText = await geminiService.getAnalysisFromAI(prompt);
    const jsonString = analysisResultText.replace(/```json\n|```/g, '').trim();
    const analysisResultJson = JSON.parse(jsonString);
    res.status(200).json(analysisResultJson);
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch khuy·∫øn m√£i:', error);
    res.status(500).json({ message: 'L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch khuy·∫øn m√£i.', error: error.message });
  }
}

module.exports = {
  analyzeDailyReport,
  analyzePromoData
};