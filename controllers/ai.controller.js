// ==========================================================
// File: controllers/ai.controller.js
// Phi√™n b·∫£n n√†y s·ª≠ d·ª•ng prompt c√≥ c·∫•u tr√∫c ƒë·ªÉ nh·∫≠n v·ªÅ JSON.
// ==========================================================

const Order = require('../models/order.model');
const Customer = require('../models/customer.model');
const geminiService = require('../services/gemini.service');

async function analyzeBusinessData(req, res) {
  console.log('ü§ñ [AI] Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ph√¢n t√≠ch...');
  try {
    const [orders, customers] = await Promise.all([
      Order.find({ financial_status: 'paid' }).sort({ created_at_haravan: -1 }).limit(100),
      Customer.find({}).sort({ total_spent: -1 }).limit(50)
    ]);

    // --- PROMPT M·ªöI, Y√äU C·∫¶U TR·∫¢ V·ªÄ JSON ---
    const prompt = `
      L√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu e-commerce, h√£y ph√¢n t√≠ch d·ªØ li·ªáu sau c·ªßa m·ªôt c·ª≠a h√†ng nh·ªè:
      - T·ªïng s·ªë ƒë∆°n h√†ng ƒë√£ thanh to√°n trong giai ƒëo·∫°n n√†y: ${orders.length}
      - D·ªØ li·ªáu 5 ƒë∆°n h√†ng g·∫ßn nh·∫•t: ${JSON.stringify(orders.slice(0, 5).map(o => ({total_price: o.total_price, source_name: o.source_name, discount_codes: o.discount_codes})))}
      - D·ªØ li·ªáu 5 kh√°ch h√†ng chi ti√™u nhi·ªÅu nh·∫•t: ${JSON.stringify(customers.slice(0, 5).map(c => ({total_spent: c.total_spent, orders_count: c.orders_count})))}

      D·ª±a v√†o d·ªØ li·ªáu tr√™n, h√£y tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t c√≥ c·∫•u tr√∫c nh∆∞ sau:
      {
        "insights": [
          "Nh·∫≠n ƒë·ªãnh 1 v·ªÅ h√†nh vi kh√°ch h√†ng v√† hi·ªáu qu·∫£ c·ªßa c√°c m√£ gi·∫£m gi√° hi·ªán t·∫°i.",
          "Nh·∫≠n ƒë·ªãnh 2 v·ªÅ xu h∆∞·ªõng mua s·∫Øm v√† c√°c s·∫£n ph·∫©m/lo·∫°i khuy·∫øn m√£i ƒë∆∞·ª£c ∆∞a chu·ªông.",
          "Nh·∫≠n ƒë·ªãnh 3 v·ªÅ ph√¢n kh√∫c kh√°ch h√†ng ti·ªÅm nƒÉng."
        ],
        "campaign_plan": {
          "event_name": "Chi·∫øn d·ªãch cho ng√†y Sale L·ªõn s·∫Øp t·ªõi (v√≠ d·ª•: 8/8)",
          "target_audience": "M√¥ t·∫£ nh√≥m kh√°ch h√†ng m·ª•c ti√™u (v√≠ d·ª•: Kh√°ch h√†ng c≈©, kh√°ch h√†ng c√≥ gi√° tr·ªã ƒë∆°n h√†ng cao).",
          "suggestions": [
            {
              "code": "BIGSALE_CODE",
              "description": "M√¥ t·∫£ chi ti·∫øt m√£ (v√≠ d·ª•: Gi·∫£m 15% (t·ªëi ƒëa 50k) cho ƒë∆°n t·ª´ 300k).",
              "reason": "L√Ω do ƒë·ªÅ xu·∫•t m√£ n√†y cho chi·∫øn d·ªãch (v√≠ d·ª•: Thu h√∫t traffic l·ªõn, tƒÉng gi√° tr·ªã gi·ªè h√†ng)."
            },
            {
              "code": "VIP_CODE",
              "description": "M√¥ t·∫£ chi ti·∫øt m√£ cho nh√≥m kh√°ch h√†ng ƒë·∫∑c bi·ªát.",
              "reason": "L√Ω do ƒë·ªÅ xu·∫•t m√£ n√†y (v√≠ d·ª•: Tri √¢n v√† tƒÉng l√≤ng trung th√†nh)."
            }
          ]
        },
        "ab_testing": [
          {
            "code": "TEST_CODE_A",
            "description": "M√¥ t·∫£ chi ti·∫øt m√£ th·ª≠ nghi·ªám A (v√≠ d·ª•: Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n t·ª´ 200k).",
            "reason": "L√Ω do v√† gi·∫£ thuy·∫øt c·ªßa th·ª≠ nghi·ªám n√†y (v√≠ d·ª•: Ki·ªÉm tra xem vi·ªác tƒÉng nh·∫π ƒëi·ªÅu ki·ªán freeship c√≥ gi√∫p tƒÉng AOV kh√¥ng)."
          },
          {
            "code": "TEST_CODE_B",
            "description": "M√¥ t·∫£ chi ti·∫øt m√£ th·ª≠ nghi·ªám B (v√≠ d·ª•: Gi·∫£m 10% khi mua t·ª´ 2 s·∫£n ph·∫©m).",
            "reason": "L√Ω do v√† gi·∫£ thuy·∫øt c·ªßa th·ª≠ nghi·ªám n√†y (v√≠ d·ª•: Th·ª≠ nghi·ªám khuy·∫øn m√£i theo s·ªë l∆∞·ª£ng ƒë·ªÉ tƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m/ƒë∆°n)."
          }
        ]
      }
    `;

    const analysisResultText = await geminiService.getAnalysisFromAI(prompt);

    // L√†m s·∫°ch v√† chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n tr·∫£ v·ªÅ th√†nh JSON
    const jsonString = analysisResultText.replace(/```json\n|```/g, '').trim();
    const analysisResultJson = JSON.parse(jsonString);

    res.status(200).json(analysisResultJson);

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch AI:', error);
    res.status(500).json({ message: 'L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch AI.', error: error.message });
  }
}

module.exports = {
  analyzeBusinessData
};
