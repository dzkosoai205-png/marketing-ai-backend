// ==========================================================
// File: controllers/ai.controller.js
// Phi√™n b·∫£n n√†y ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p to√†n di·ªán cho c·∫£ 2 b·ªô n√£o AI.
// ==========================================================

const Order = require('../models/order.model');
const Customer = require('../models/customer.model');
const DailyReport = require('../models/dailyReport.model.js');
const BusinessSettings = require('../models/businessSettings.model.js');
const FinancialEvent = require('../models/financialEvent.model.js');
const geminiService = require('../services/gemini.service');

// --- B·ªò N√ÉO 1: PH√ÇN T√çCH B√ÅO C√ÅO K·∫æ TO√ÅN (N√ÇNG C·∫§P) ---
async function analyzeDailyReport(req, res) {
  console.log('ü§ñ [AI] Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ph√¢n t√≠ch k·∫ø to√°n...');
  try {
    // B∆∞·ªõc 1: L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt
    const [latestReport, settings, upcomingEvents, todaysOrders] = await Promise.all([
        DailyReport.findOne().sort({ report_date: -1 }),
        BusinessSettings.findOne({ shop_id: 'main_settings' }),
        FinancialEvent.find({ due_date: { $gte: new Date() }, is_paid: false }).sort({ due_date: 1 }),
        Order.find({ created_at_haravan: { $gte: new Date(new Date().setHours(0,0,0,0)) } })
    ]);

    if (!latestReport) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o n√†o ƒë·ªÉ ph√¢n t√≠ch.' });
    }

    // B∆∞·ªõc 2: T·∫°o m·ªôt prompt to√†n di·ªán cho AI
    const prompt = `
      L√† m·ªôt Gi√°m ƒë·ªëc T√†i ch√≠nh (CFO) ·∫£o cho m·ªôt c·ª≠a h√†ng nh·ªè, h√£y ph√¢n t√≠ch c√°c d·ªØ li·ªáu sau v√† ƒë∆∞a ra m·ªôt b·∫£n b√°o c√°o t·ªïng quan.
      
      D·ªØ li·ªáu kinh doanh h√¥m nay:
      - Doanh thu: ${latestReport.total_revenue.toLocaleString('vi-VN')}ƒë
      - L·ª£i nhu·∫≠n: ${latestReport.total_profit.toLocaleString('vi-VN')}ƒë
      - Ghi ch√∫ c·ªßa ch·ªß shop: ${latestReport.notes || 'Kh√¥ng c√≥'}
      - S·ªë ƒë∆°n h√†ng h√¥m nay: ${todaysOrders.length}

      D·ªØ li·ªáu v·∫≠n h√†nh h√†ng th√°ng:
      - Chi ph√≠ c·ªë ƒë·ªãnh (thu√™, l∆∞∆°ng, etc.): ${((settings?.monthly_rent_cost || 0) + (settings?.monthly_staff_cost || 0) + (settings?.monthly_marketing_cost || 0) + (settings?.monthly_other_cost || 0)).toLocaleString('vi-VN')}ƒë
      - M·ª•c ti√™u l·ª£i nhu·∫≠n th√°ng: ${ (settings?.monthly_profit_target || 0).toLocaleString('vi-VN')}ƒë

      C√°c s·ª± ki·ªán chi ti·ªÅn l·ªõn s·∫Øp t·ªõi:
      ${JSON.stringify(upcomingEvents.map(e => ({name: e.event_name, amount: e.amount, due_date: e.due_date.toLocaleDateString('vi-VN')}))) }

      D·ª±a v√†o TO√ÄN B·ªò d·ªØ li·ªáu tr√™n, h√£y tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t c√≥ c·∫•u tr√∫c:
      {
        "summary": "T√≥m t·∫Øt (2-3 c√¢u) v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh h√¥m nay, so s√°nh l·ª£i nhu·∫≠n v·ªõi chi ph√≠ v√† m·ª•c ti√™u.",
        "cash_flow_alert": {
          "has_alert": true, // true n·∫øu c√≥ r·ªßi ro, false n·∫øu kh√¥ng
          "message": "C·∫£nh b√°o v·ªÅ d√≤ng ti·ªÅn n·∫øu c√≥ s·ª± ki·ªán chi ti·ªÅn l·ªõn s·∫Øp t·ªõi m√† l·ª£i nhu·∫≠n hi·ªán t·∫°i kh√¥ng ƒë·ªß ƒë·ªÉ ƒë√°p ·ª©ng. V√≠ d·ª•: 'C·∫£nh b√°o: B·∫°n c·∫ßn ki·∫øm th√™m X tri·ªáu trong Y ng√†y t·ªõi ƒë·ªÉ thanh to√°n cho s·ª± ki·ªán Z.' N·∫øu kh√¥ng c√≥ r·ªßi ro, h√£y ghi 'D√≤ng ti·ªÅn hi·ªán t·∫°i ·ªïn ƒë·ªãnh.'"
        },
        "insights": [
          "Nh·∫≠n ƒë·ªãnh 1 v·ªÅ m·ªëi li√™n h·ªá gi·ªØa l·ª£i nhu·∫≠n h√¥m nay v√† m·ª•c ti√™u th√°ng.",
          "Nh·∫≠n ƒë·ªãnh 2 v·ªÅ √°p l·ª±c c·ªßa c√°c kho·∫£n chi s·∫Øp t·ªõi l√™n d√≤ng ti·ªÅn."
        ],
        "recommendations": [
          { 
            "action": "ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c c·ª• th·ªÉ ƒë·ªÉ ƒë·∫°t m·ª•c ti√™u ho·∫∑c gi·∫£i quy·∫øt c·∫£nh b√°o d√≤ng ti·ªÅn.", 
            "details": "Chi ti·∫øt h√†nh ƒë·ªông (v√≠ d·ª•: T·∫°o m√£ gi·∫£m gi√° 'SALE10' gi·∫£m 10% cho c√°c s·∫£n ph·∫©m b√°n ch·∫°y).", 
            "reason": "L√Ω do t·∫°i sao n√™n l√†m v·∫≠y." 
          },
          { 
            "action": "ƒê·ªÅ xu·∫•t th·ª© hai.", 
            "details": "Chi ti·∫øt h√†nh ƒë·ªông.", 
            "reason": "L√Ω do."
          }
        ]
      }
    `;

    const analysisResultText = await geminiService.getAnalysisFromAI(prompt);
    const jsonString = analysisResultText.replace(/```json\n|```/g, '').trim();
    const analysisResultJson = JSON.parse(jsonString);
    res.status(200).json(analysisResultJson);

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch AI K·∫ø to√°n:', error);
    res.status(500).json({ message: 'L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch AI K·∫ø to√°n.', error: error.message });
  }
}

// --- B·ªò N√ÉO 2: PH√ÇN T√çCH D·ªÆ LI·ªÜU KHUY·∫æN M√ÉI (S·ª¨A L·ªñI) ---
async function analyzePromoData(req, res) {
  console.log('ü§ñ [AI] Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ph√¢n t√≠ch khuy·∫øn m√£i...');
  try {
    const [orders, customers] = await Promise.all([
      Order.find({ financial_status: 'paid' }).sort({ created_at_haravan: -1 }).limit(200),
      Customer.find({}).sort({ total_spent: -1 }).limit(50)
    ]);

    const prompt = `
      L√† m·ªôt chuy√™n gia marketing e-commerce, h√£y ph√¢n t√≠ch d·ªØ li·ªáu sau c·ªßa m·ªôt c·ª≠a h√†ng b√°n ƒë·ªì anime v√† tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON:
      - D·ªØ li·ªáu 10 ƒë∆°n h√†ng g·∫ßn nh·∫•t c√≥ m√£ gi·∫£m gi√°: ${JSON.stringify(orders.filter(o => o.discount_codes.length > 0).slice(0, 10).map(o => ({total_price: o.total_price, discount_codes: o.discount_codes, customer_email: o.email})))}
      - D·ªØ li·ªáu 5 kh√°ch h√†ng chi ti√™u nhi·ªÅu nh·∫•t: ${JSON.stringify(customers.slice(0, 5).map(c => ({total_spent: c.total_spent, orders_count: c.orders_count, email: c.email})))}

      C·∫•u tr√∫c JSON tr·∫£ v·ªÅ:
      {
        "insights": ["Nh·∫≠n ƒë·ªãnh 1 v·ªÅ lo·∫°i m√£ gi·∫£m gi√° hi·ªáu qu·∫£.", "Nh·∫≠n ƒë·ªãnh 2 v·ªÅ nh√≥m kh√°ch h√†ng ph·∫£n ·ª©ng t·ªët v·ªõi khuy·∫øn m√£i."],
        "campaign_plan": {
          "event_name": "Chi·∫øn d·ªãch cho ng√†y Sale L·ªõn s·∫Øp t·ªõi",
          "target_audience": "M√¥ t·∫£ nh√≥m kh√°ch h√†ng m·ª•c ti√™u.",
          "suggestions": [
            { "code": "BIGSALE_CODE", "description": "M√¥ t·∫£ chi ti·∫øt m√£.", "reason": "L√Ω do ƒë·ªÅ xu·∫•t." }
          ]
        },
        "ab_testing": [
          { "code": "TEST_CODE_A", "description": "M√¥ t·∫£ chi ti·∫øt m√£ th·ª≠ nghi·ªám A.", "reason": "L√Ω do v√† gi·∫£ thuy·∫øt th·ª≠ nghi·ªám." }
        ]
      }
    `;

    const analysisResultText = await geminiService.getAnalysisFromAI(prompt);
    const jsonString = analysisResultText.replace(/```json\n|```/g, '').trim();
    const analysisResultJson = JSON.parse(jsonString);
    res.status(200).json(analysisResultJson);

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch khuy·∫øn m√£i:', error);
    res.status(500).json({ message: 'L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch khuy·∫øn m√£i.', error: error.message });
  }
}

module.exports = {
  analyzeDailyReport,
  analyzePromoData
};
