// ==========================================================
// File: controllers/social.controller.js
// PHI√äN B·∫¢N N√ÇNG C·∫§P: Th√™m ch·ª©c nƒÉng t·∫°o k·ªãch b·∫£n video TikTok.
// ==========================================================

const geminiService = require('../services/gemini.service');
const Product = require('../models/product.model');

/**
 * Controller ƒë·ªÉ t·∫°o caption qu·∫£ng c√°o cho m·ªôt s·∫£n ph·∫©m.
 */
async function generateCaptions(req, res) {
  const { productName, reason } = req.body;

  if (!productName) {
    return res.status(400).json({ message: 'T√™n s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc.' });
  }

  console.log(`‚úçÔ∏è [AI] Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu vi·∫øt caption cho s·∫£n ph·∫©m: ${productName}`);

  try {
    const product = await Product.findOne({ title: productName });

    const prompt = `
      L√† m·ªôt chuy√™n gia vi·∫øt n·ªôi dung qu·∫£ng c√°o cho m·ªôt c·ª≠a h√†ng b√°n ƒë·ªì anime, h√£y vi·∫øt 3 caption Facebook h·∫•p d·∫´n ƒë·ªÉ qu·∫£ng c√°o cho s·∫£n ph·∫©m sau.
      
      **Th√¥ng tin s·∫£n ph·∫©m:**
      - T√™n s·∫£n ph·∫©m: ${productName}
      - Lo·∫°i s·∫£n ph·∫©m: ${product ? product.product_type : 'Kh√¥ng r√µ'}
      - Tags: ${product ? product.tags : 'Kh√¥ng r√µ'}

      **B·ªëi c·∫£nh / L√Ω do qu·∫£ng c√°o:**
      - ${reason || `TƒÉng doanh s·ªë cho s·∫£n ph·∫©m ${productName}.`}

      **Y√™u c·∫ßu:**
      - Vi·∫øt 3 caption v·ªõi c√°c phong c√°ch kh√°c nhau (h√†i h∆∞·ªõc, k√™u g·ªçi h√†nh ƒë·ªông, k·ªÉ chuy·ªán).
      - M·ªói caption ph·∫£i c√≥ c√°c hashtag li√™n quan (#anime, #[t√™n_anime]...).
      - Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON c√≥ key l√† "captions", gi√° tr·ªã l√† m·ªôt m·∫£ng (array) ch·ª©a 3 chu·ªói (string) caption.
    `;

    const resultText = await geminiService.getAnalysisFromAI(prompt);
    const jsonString = resultText.replace(/```json\n|```/g, '').trim();
    const resultJson = JSON.parse(jsonString);

    console.log(`‚úÖ [AI] ƒê√£ t·∫°o th√†nh c√¥ng caption cho: ${productName}`);
    res.status(200).json(resultJson);

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o caption:', error);
    res.status(500).json({ message: 'L·ªói khi t·∫°o caption.', error: error.message });
  }
}


// ==========================================================
// ‚ú® H√ÄM M·ªöI: T·∫†O K·ªäCH B·∫¢N TIKTOK
// ==========================================================
/**
 * Controller ƒë·ªÉ t·∫°o k·ªãch b·∫£n video TikTok.
 */
async function generateScripts(req, res) {
    const { topic } = req.body; // Nh·∫≠n ch·ªß ƒë·ªÅ t·ª´ frontend

    if (!topic) {
        return res.status(400).json({ message: 'Ch·ªß ƒë·ªÅ l√† b·∫Øt bu·ªôc.' });
    }

    console.log(`üé¨ [AI] Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu vi·∫øt k·ªãch b·∫£n TikTok cho ch·ªß ƒë·ªÅ: ${topic}`);

    try {
        const prompt = `
            B·∫°n l√† m·ªôt nh√† s√°ng t·∫°o n·ªôi dung TikTok chuy√™n v·ªÅ review v√† unbox ƒë·ªì anime, v·ªõi h√†ng tri·ªáu l∆∞·ª£t xem.
            Nhi·ªám v·ª• c·ªßa b·∫°n l√† vi·∫øt 3 √Ω t∆∞·ªüng k·ªãch b·∫£n video ng·∫Øn (15-30 gi√¢y) cho ch·ªß ƒë·ªÅ sau: "${topic}".

            **Y√™u c·∫ßu:**
            - M·ªói k·ªãch b·∫£n ph·∫£i c√≥ c·∫•u tr√∫c r√µ r√†ng: C·∫£nh 1, C·∫£nh 2, C·∫£nh 3.
            - V·ªõi m·ªói k·ªãch b·∫£n, h√£y ƒë·ªÅ xu·∫•t:
                - **Nh·∫°c n·ªÅn (Music):** T√™n m·ªôt b√†i h√°t ho·∫∑c lo·∫°i nh·∫°c ƒëang trend, ph√π h·ª£p v·ªõi video.
                - **VƒÉn b·∫£n tr√™n m√†n h√¨nh (On-screen Text):** C√°c d√≤ng ch·ªØ ng·∫Øn g·ªçn, h·∫•p d·∫´n xu·∫•t hi·ªán trong video.
            - C√°c k·ªãch b·∫£n ph·∫£i theo c√°c phong c√°ch kh√°c nhau: m·ªôt k·ªãch b·∫£n unbox ASMR, m·ªôt k·ªãch b·∫£n theo trend h√†i h∆∞·ªõc, v√† m·ªôt k·ªãch b·∫£n cinematic khoe v·∫ª ƒë·∫πp s·∫£n ph·∫©m.
            - Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON c√≥ key l√† "scripts", gi√° tr·ªã l√† m·ªôt m·∫£ng ch·ª©a 3 object k·ªãch b·∫£n.

            **V√≠ d·ª• c·∫•u tr√∫c JSON tr·∫£ v·ªÅ:**
            {
                "scripts": [
                    {
                        "title": "K·ªãch b·∫£n 1: Unbox ASMR",
                        "scenes": [
                            "C·∫£nh 1: Quay c·∫≠n c·∫£nh tay ƒëang t·ª´ t·ª´ m·ªü h·ªôp s·∫£n ph·∫©m, t·∫≠p trung v√†o √¢m thanh x√© gi·∫•y, m·ªü seal.",
                            "C·∫£nh 2: L·∫•y s·∫£n ph·∫©m ra, quay ch·∫≠m 360 ƒë·ªô ƒë·ªÉ khoe chi ti·∫øt.",
                            "C·∫£nh 3: ƒê·∫∑t s·∫£n ph·∫©m l√™n b√†n tr∆∞ng b√†y, k·∫øt th√∫c b·∫±ng h√¨nh ·∫£nh s·∫£n ph·∫©m ho√†n h·∫£o."
                        ],
                        "music": "√Çm thanh ASMR t·ª± nhi√™n, kh√¥ng nh·∫°c n·ªÅn",
                        "on_screen_text": ["Finally here!", "OMG so detailed!", "Must-have item!"]
                    },
                    {
                        "title": "K·ªãch b·∫£n 2: Trend H√†i h∆∞·ªõc",
                        "scenes": ["..."],
                        "music": "Nh·∫°c n·ªÅn hot trend tr√™n TikTok",
                        "on_screen_text": ["..."]
                    }
                ]
            }
        `;

        const resultText = await geminiService.getAnalysisFromAI(prompt);
        // X·ª≠ l√Ω ƒë·ªÉ l·∫•y kh·ªëi JSON m·ªôt c√°ch an to√†n
        const match = resultText.match(/```json\n([\s\S]*?)\n```/);
        if (!match || !match[1]) {
            throw new Error("AI kh√¥ng tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON h·ª£p l·ªá.");
        }
        const jsonString = match[1].trim();
        const resultJson = JSON.parse(jsonString);

        console.log(`‚úÖ [AI] ƒê√£ t·∫°o th√†nh c√¥ng k·ªãch b·∫£n TikTok cho: ${topic}`);
        res.status(200).json(resultJson);

    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫°o k·ªãch b·∫£n TikTok:', error);
        res.status(500).json({ message: 'L·ªói khi t·∫°o k·ªãch b·∫£n TikTok.', error: error.message });
    }
}


module.exports = {
  generateCaptions,
  generateScripts // ‚ú® Xu·∫•t h√†m m·ªõi
};
