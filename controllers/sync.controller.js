// ==========================================================
// File: controllers/sync.controller.js (ƒê√£ c·∫≠p nh·∫≠t ƒë·ªÉ ƒë·ªìng b·ªô Collections)
// Nhi·ªám v·ª•: Ch·ª©a logic ch√≠nh ƒë·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu.
// ==========================================================

const haravanService = require('../services/haravan.service');
const Coupon = require('../models/coupon.model');
const Order = require('../models/order.model');
const Customer = require('../models/customer.model');
const Product = require('../models/product.model');
const HaravanCollection = require('../models/haravanCollection.model'); // <-- TH√äM: Model cho Collections

/**
 * Controller ƒë·ªÉ k√≠ch ho·∫°t qu√° tr√¨nh ƒë·ªìng b·ªô to√†n b·ªô d·ªØ li·ªáu
 * t·ª´ Haravan v·ªÅ MongoDB.
 */
async function syncAllData(req, res) {
    console.log('üîÑ B·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒë·ªìng b·ªô d·ªØ li·ªáu...');
    try {
        // --- B∆∞·ªõc 1: L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t t·ª´ Haravan ---
        // Gi·∫£ ƒë·ªãnh haravanService c·ªßa b·∫°n c√≥ c√°c h√†m m·ªõi:
        // .getProductsWithCollects()
        // .getCustomCollections()
        const [
            couponsFromHaravan, 
            ordersFromHaravan, 
            customersFromHaravan,
            productsFromHaravan, // D·ªØ li·ªáu s·∫£n ph·∫©m th√¥
            collectionsFromHaravan, // <-- TH√äM: D·ªØ li·ªáu collections
            collectsFromHaravan // <-- TH√äM: D·ªØ li·ªáu collects
        ] = await Promise.all([
            haravanService.getDiscountCodes(),
            haravanService.getOrders(),
            haravanService.getCustomers(),
            haravanService.getProducts(),
            haravanService.getCustomCollections(), // <-- TH√äM
            haravanService.getCollects() // <-- TH√äM
        ]);

        console.log(`- ƒê√£ l·∫•y ƒë∆∞·ª£c: ${productsFromHaravan.length} s·∫£n ph·∫©m, ${couponsFromHaravan.length} m√£, ${ordersFromHaravan.length} ƒë∆°n h√†ng, ${customersFromHaravan.length} kh√°ch h√†ng, ${collectionsFromHaravan.length} collections, ${collectsFromHaravan.length} collects.`);

        // --- B∆∞·ªõc 1.5: ƒê·ªìng b·ªô Collections v√†o Model MongoDB ---
        // B∆Ø·ªöC M·ªöI: ƒê·ªìng b·ªô Collections tr∆∞·ªõc ƒë·ªÉ c√≥ map ID-to-Name
        if (collectionsFromHaravan && collectionsFromHaravan.length > 0) {
            const collectionOps = collectionsFromHaravan.map(collection => ({
                updateOne: {
                    filter: { id: collection.id },
                    update: { $set: { ...collection, created_at_haravan: collection.created_at, updated_at_haravan: collection.updated_at } },
                    upsert: true
                }
            }));
            await HaravanCollection.bulkWrite(collectionOps);
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${collectionsFromHaravan.length} Collections.`);
        }
        
        // T·∫°o m·ªôt map t·ª´ ID Collection sang t√™n c·ªßa n√≥ ƒë·ªÉ s·ª≠ d·ª•ng ·ªü b∆∞·ªõc sau
        const collectionIdToNameMap = {};
        collectionsFromHaravan.forEach(col => {
            collectionIdToNameMap[col.id] = col.title;
        });

        // T·∫°o m·ªôt map t·ª´ Product ID sang m·∫£ng Collects c·ªßa n√≥
        const productCollectsMap = {};
        collectsFromHaravan.forEach(collect => {
            if (!productCollectsMap[collect.product_id]) {
                productCollectsMap[collect.product_id] = [];
            }
            productCollectsMap[collect.product_id].push(collect.collection_id);
        });

        // --- B∆∞·ªõc 2: ƒê·ªìng b·ªô S·∫£n ph·∫©m (ƒê√£ s·ª≠a) ---
        if (productsFromHaravan && productsFromHaravan.length > 0) {
            const productOps = productsFromHaravan.map(product => {
                // √Ånh x·∫° Product ID v·ªõi Collection IDs v√† Names
                const associatedCollectionIds = productCollectsMap[product.id] || [];
                const associatedCollectionNames = associatedCollectionIds
                    .map(id => collectionIdToNameMap[id])
                    .filter(name => name); // L·ªçc b·ªè t√™n undefined/null

                return {
                    updateOne: {
                        filter: { id: product.id },
                        update: {
                            $set: {
                                ...product,
                                created_at_haravan: product.created_at,
                                updated_at_haravan: product.updated_at,
                                // G√°n c√°c tr∆∞·ªùng m·ªõi
                                haravan_collection_ids: associatedCollectionIds,
                                haravan_collection_names: associatedCollectionNames,
                                // S·ª≠a l·ªói c·ªßa b·∫°n: setOnInsert kh√¥ng ph·∫£i l√† $set
                                // $setOnInsert ch·ªâ ho·∫°t ƒë·ªông khi document ƒë∆∞·ª£c t·∫°o m·ªõi (upsert)
                            },
                            // $setOnInsert: { is_new_product: true, first_imported_at: new Date() } // <-- Gi·ªØ logic n√†y
                        },
                        upsert: true
                    }
                };
            });
            await Product.bulkWrite(productOps);
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${productsFromHaravan.length} s·∫£n ph·∫©m.`);
        }


        // --- B∆∞·ªõc 3: ƒê·ªìng b·ªô M√£ gi·∫£m gi√° (Gi·ªØ nguy√™n) ---
        if (couponsFromHaravan && couponsFromHaravan.length > 0) {
            const couponOps = couponsFromHaravan.map(coupon => ({
                updateOne: {
                    filter: { id: coupon.id },
                    update: { $set: coupon },
                    upsert: true
                }
            }));
            await Coupon.bulkWrite(couponOps);
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${couponsFromHaravan.length} m√£ gi·∫£m gi√°.`);
        }

        // --- B∆∞·ªõc 4: ƒê·ªìng b·ªô ƒê∆°n h√†ng (Gi·ªØ nguy√™n) ---
        if (ordersFromHaravan && ordersFromHaravan.length > 0) {
            const orderOps = ordersFromHaravan.map(order => ({
                updateOne: {
                    filter: { id: order.id },
                    update: { $set: { ...order, created_at_haravan: order.created_at } },
                    upsert: true
                }
            }));
            await Order.bulkWrite(orderOps);
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${ordersFromHaravan.length} ƒë∆°n h√†ng.`);
        }

        // --- B∆∞·ªõc 5: ƒê·ªìng b·ªô Kh√°ch h√†ng (Gi·ªØ nguy√™n) ---
        if (customersFromHaravan && customersFromHaravan.length > 0) {
            const customerOps = customersFromHaravan.map(customer => ({
                updateOne: {
                    filter: { id: customer.id },
                    update: { $set: customer },
                    upsert: true
                }
            }));
            await Customer.bulkWrite(customerOps);
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${customersFromHaravan.length} kh√°ch h√†ng.`);
        }

        res.status(200).json({
            message: 'üéâ ƒê·ªìng b·ªô d·ªØ li·ªáu th√†nh c√¥ng!',
            syncedProducts: productsFromHaravan.length,
            syncedCoupons: couponsFromHaravan.length,
            syncedOrders: ordersFromHaravan.length,
            syncedCustomers: customersFromHaravan.length,
        });

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh ƒë·ªìng b·ªô:', error);
        res.status(500).json({ message: 'ƒê·ªìng b·ªô d·ªØ li·ªáu th·∫•t b·∫°i.', error: error.message });
    }
}

module.exports = {
    syncAllData
};