// ==========================================================
// File: controllers/sync.controller.js (Ho√†n thi·ªán ƒê·ªìng b·ªô Smart Collections)
// Nhi·ªám v·ª•: Ch·ª©a logic ch√≠nh ƒë·ªÉ ƒë·ªìng b·ªô d·ªØ li·ªáu.
// ==========================================================

const haravanService = require('../services/haravan.service');
const Product = require('../models/product.model');
const HaravanCollection = require('../models/haravanCollection.model');

// H√†m tr·ª£ gi√∫p ƒë·ªÉ ki·ªÉm tra xem m·ªôt s·∫£n ph·∫©m c√≥ kh·ªõp v·ªõi quy t·∫Øc c·ªßa Smart Collection kh√¥ng
const matchesRule = (product, rule) => {
    const { column, relation, condition } = rule;
    let productValue;

    switch (column) {
        case 'title':
            productValue = product.title;
            break;
        case 'product_type':
            productValue = product.product_type;
            break;
        case 'vendor':
            productValue = product.vendor;
            break;
        case 'tag':
            productValue = product.tags;
            break;
        case 'variant_title':
            productValue = product.variants.map(v => v.title).join(', '); // N·ªëi t·∫•t c·∫£ variant titles
            break;
        case 'price':
            // C·∫ßn t√≠nh gi√° trung b√¨nh ho·∫∑c ki·ªÉm tra t·ª´ng variant
            productValue = product.variants.length > 0 ? product.variants[0].price : 0; // Gi·∫£ ƒë·ªãnh l·∫•y gi√° c·ªßa variant ƒë·∫ßu ti√™n
            break;
        // Th√™m c√°c case kh√°c n·∫øu b·∫°n d√πng c√°c c·ªôt kh√°c trong quy t·∫Øc c·ªßa m√¨nh
        default:
            return false;
    }

    if (productValue === undefined || productValue === null) {
        return false;
    }

    const conditionValue = condition.toLowerCase();
    const productValueLower = String(productValue).toLowerCase();

    switch (relation) {
        case 'equals':
            return productValueLower === conditionValue;
        case 'not_equals':
            return productValueLower !== conditionValue;
        case 'contains':
            return productValueLower.includes(conditionValue);
        case 'not_contains':
            return !productValueLower.includes(conditionValue);
        case 'starts_with':
            return productValueLower.startsWith(conditionValue);
        case 'ends_with':
            return productValueLower.endsWith(conditionValue);
        // Th√™m c√°c case kh√°c nh∆∞ 'greater_than', 'less_than' n·∫øu b·∫°n s·ª≠ d·ª•ng
        default:
            return false;
    }
};

// H√†m ch√≠nh ƒë·ªÉ ƒë·ªìng b·ªô t·∫•t c·∫£ d·ªØ li·ªáu
async function syncAllData(req, res) {
    console.log('üîÑ B·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒë·ªìng b·ªô d·ªØ li·ªáu...');
    try {
        // --- B∆∞·ªõc 1: L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t t·ª´ Haravan ---
        const [
            couponsFromHaravan, 
            ordersFromHaravan, 
            customersFromHaravan,
            productsFromHaravan,
            smartCollectionsFromHaravan // <-- C·∫¨P NH·∫¨T: D·ªØ li·ªáu Smart Collections
        ] = await Promise.all([
            haravanService.getDiscountCodes(),
            haravanService.getOrders(),
            haravanService.getCustomers(),
            haravanService.getProducts(),
            haravanService.getSmartCollections() // <-- C·∫¨P NH·∫¨T
        ]);

        console.log(`- ƒê√£ l·∫•y ƒë∆∞·ª£c: ${productsFromHaravan.length} s·∫£n ph·∫©m, ${couponsFromHaravan.length} m√£, ${ordersFromHaravan.length} ƒë∆°n h√†ng, ${customersFromHaravan.length} kh√°ch h√†ng, ${smartCollectionsFromHaravan.length} Smart Collections.`);

        // --- B∆∞·ªõc 1.5: ƒê·ªìng b·ªô Smart Collections v√†o Model MongoDB ---
        if (smartCollectionsFromHaravan && smartCollectionsFromHaravan.length > 0) {
            const collectionOps = smartCollectionsFromHaravan.map(collection => ({
                updateOne: {
                    filter: { id: collection.id },
                    update: { $set: { ...collection, created_at_haravan: collection.created_at, updated_at_haravan: collection.updated_at } },
                    upsert: true
                }
            }));
            await HaravanCollection.bulkWrite(collectionOps);
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${smartCollectionsFromHaravan.length} Smart Collections.`);
        }
        
        // --- B∆∞·ªõc 2: ƒê·ªìng b·ªô Products v√† √°nh x·∫° v·ªõi Smart Collections ---
        if (productsFromHaravan && productsFromHaravan.length > 0) {
            const productOps = productsFromHaravan.map(product => {
                // LOGIC C·∫¨P NH·∫¨T: X√°c ƒë·ªãnh c√°c Smart Collections m√† s·∫£n ph·∫©m n√†y thu·ªôc v·ªÅ
                const associatedCollectionIds = [];
                const associatedCollectionNames = [];

                smartCollectionsFromHaravan.forEach(collection => {
                    const { rules, disjunctive } = collection;
                    let isMatch = false;

                    // N·∫øu disjunctive = true (OR), ch·ªâ c·∫ßn m·ªôt rule kh·ªõp l√† ƒë∆∞·ª£c
                    if (disjunctive) {
                        isMatch = rules.some(rule => matchesRule(product, rule));
                    } else {
                        // N·∫øu disjunctive = false (AND), t·∫•t c·∫£ c√°c rules ph·∫£i kh·ªõp
                        isMatch = rules.every(rule => matchesRule(product, rule));
                    }

                    if (isMatch) {
                        associatedCollectionIds.push(collection.id);
                        associatedCollectionNames.push(collection.title);
                    }
                });

                return {
                    updateOne: {
                        filter: { id: product.id },
                        update: {
                            $set: {
                                ...product,
                                created_at_haravan: product.created_at,
                                updated_at_haravan: product.updated_at,
                                haravan_collection_ids: associatedCollectionIds,
                                haravan_collection_names: associatedCollectionNames,
                                // S·ª≠a l·ªói c≈©: ƒê·∫£m b·∫£o tr∆∞·ªùng variants ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë√∫ng
                                variants: product.variants.map(haravanVariant => {
                                    // T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng variant m·ªõi, b·∫Øt ƒë·∫ßu v·ªõi d·ªØ li·ªáu t·ª´ Haravan
                                    let newVariant = { ...haravanVariant };
                                    if (haravanVariant.cost === undefined) { 
                                        newVariant.cost = 0; 
                                    }
                                    return newVariant;
                                }),
                            },
                        },
                        upsert: true
                    }
                };
            });
            await Product.bulkWrite(productOps);
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${productsFromHaravan.length} s·∫£n ph·∫©m.`);
        }

        // --- C√°c b∆∞·ªõc ƒë·ªìng b·ªô kh√°c (Gi·ªØ nguy√™n) ---
        // --- B∆∞·ªõc 3: ƒê·ªìng b·ªô M√£ gi·∫£m gi√° ---
        if (couponsFromHaravan && couponsFromHaravan.length > 0) {
            const couponOps = couponsFromHaravan.map(coupon => ({
                updateOne: {
                    filter: { id: coupon.id },
                    update: { $set: coupon },
                    upsert: true
                }
            }));
            await Coupon.bulkWrite(couponOps);
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${couponsFromHaravan.length} m√£ gi·∫£m gi√°.`);
        }

        // --- B∆∞·ªõc 4: ƒê·ªìng b·ªô ƒê∆°n h√†ng ---
        if (ordersFromHaravan && ordersFromHaravan.length > 0) {
            const orderOps = ordersFromHaravan.map(order => ({
                updateOne: {
                    filter: { id: order.id },
                    update: { $set: { ...order, created_at_haravan: order.created_at } },
                    upsert: true
                }
            }));
            await Order.bulkWrite(orderOps);
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${ordersFromHaravan.length} ƒë∆°n h√†ng.`);
        }

        // --- B∆∞·ªõc 5: ƒê·ªìng b·ªô Kh√°ch h√†ng ---
        if (customersFromHaravan && customersFromHaravan.length > 0) {
            const customerOps = customersFromHaravan.map(customer => ({
                updateOne: {
                    filter: { id: customer.id },
                    update: { $set: customer },
                    upsert: true
                }
            }));
            await Customer.bulkWrite(customerOps);
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${customersFromHaravan.length} kh√°ch h√†ng.`);
        }

        res.status(200).json({
            message: 'üéâ ƒê·ªìng b·ªô d·ªØ li·ªáu th√†nh c√¥ng!',
            syncedProducts: productsFromHaravan.length,
            syncedCoupons: couponsFromHaravan.length,
            syncedOrders: ordersFromHaravan.length,
            syncedCustomers: customersFromHaravan.length,
        });

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh ƒë·ªìng b·ªô:', error);
        res.status(500).json({ message: 'ƒê·ªìng b·ªô d·ªØ li·ªáu th·∫•t b·∫°i.', error: error.message });
    }
}

module.exports = {
    syncAllData
};