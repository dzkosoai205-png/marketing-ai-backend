// ==========================================================
// File: controllers/sync.controller.js (S·ª≠ d·ª•ng date-fns-tz ƒë·ªÉ chu·∫©n h√≥a m√∫i gi·ªù Order)
// ==========================================================
const haravanService = require('../services/haravan.service');
const Product = require('../models/product.model');
const HaravanCollection = require('../models/haravanCollection.model');
const Coupon = require('../models/coupon.model'); 
const Order = require('../models/order.model'); 
const Customer = require('../models/customer.model'); 

// TH√äM: Import date-fns-tz
const { utcToZonedTime, format } = require('date-fns-tz'); 

// C·∫ßn bi·∫øt m√∫i gi·ªù c·ªßa c·ª≠a h√†ng Haravan c·ªßa b·∫°n (v√≠ d·ª•: 'Asia/Ho_Chi_Minh' cho GMT+7)
const STORE_TIMEZONE = 'Asia/Ho_Chi_Minh'; // HO·∫∂C m√∫i gi·ªù ch√≠nh x√°c c·ªßa c·ª≠a h√†ng Haravan c·ªßa b·∫°n

// H√†m tr·ª£ gi√∫p ƒë·ªÉ ki·ªÉm tra xem m·ªôt s·∫£n ph·∫©m c√≥ kh·ªõp v·ªõi quy t·∫Øc c·ªßa Smart Collection kh√¥ng
const matchesRule = (product, rule) => {
    const { column, relation, condition } = rule;
    let productValue;

    switch (column) {
        case 'title':
            productValue = product.title;
            break;
        case 'product_type':
            productValue = product.product_type;
            break;
        case 'vendor':
            productValue = product.vendor;
            break;
        case 'tag':
            productValue = product.tags;
            break;
        case 'variant_title':
            productValue = product.variants.map(v => v.title).join(', ');
            break;
        case 'price':
            productValue = product.variants.length > 0 ? product.variants[0].price : 0;
            break;
        default:
            return false;
    }

    if (productValue === undefined || productValue === null) {
        return false;
    }

    const conditionValue = condition.toLowerCase();
    const productValueLower = String(productValue).toLowerCase();

    switch (relation) {
        case 'equals':
            return productValueLower === conditionValue;
        case 'not_equals':
            return productValueLower !== conditionValue;
        case 'contains':
            return productValueLower.includes(conditionValue);
        case 'not_contains':
            return !productValueLower.includes(conditionValue);
        case 'starts_with':
            return productValueLower.startsWith(conditionValue);
        case 'ends_with':
            return productValueLower.endsWith(conditionValue);
        default:
            return false;
    }
};

// H√†m ch√≠nh ƒë·ªÉ ƒë·ªìng b·ªô t·∫•t c·∫£ d·ªØ li·ªáu
async function syncAllData(req, res) {
    console.log('üîÑ B·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒë·ªìng b·ªô d·ªØ li·ªáu...');
    try {
        const [
            couponsFromHaravan, 
            ordersFromHaravan, 
            customersFromHaravan,
            productsFromHaravan,
            smartCollectionsFromHaravan,
            collectsFromHaravan 
        ] = await Promise.all([
            haravanService.getDiscountCodes(),
            haravanService.getOrders(), 
            haravanService.getCustomers(),
            haravanService.getProducts(),
            haravanService.getSmartCollections(),
            haravanService.getCollects() 
        ]);

        console.log(`- ƒê√£ l·∫•y ƒë∆∞·ª£c: ${productsFromHaravan.length} s·∫£n ph·∫©m, ${couponsFromHaravan.length} m√£, ${ordersFromHaravan.length} ƒë∆°n h√†ng, ${customersFromHaravan.length} kh√°ch h√†ng, ${smartCollectionsFromHaravan.length} Smart Collections, ${collectsFromHaravan.length} collects.`);

        // --- B∆∞·ªõc 1.5: ƒê·ªìng b·ªô Smart Collections v√†o Model MongoDB ---
        if (smartCollectionsFromHaravan && smartCollectionsFromHaravan.length > 0) {
            const collectionOps = smartCollectionsFromHaravan.map(collection => ({
                updateOne: {
                    filter: { id: collection.id },
                    update: { $set: { ...collection, created_at_haravan: collection.created_at, updated_at_haravan: collection.updated_at } },
                    upsert: true
                }
            }));
            await HaravanCollection.bulkWrite(collectionOps);
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${collectionsFromHaravan.length} Smart Collections.`);
        }
        
        const collectionIdToNameMap = {};
        collectionsFromHaravan.forEach(col => { // L·∫•y collectionsFromHaravan t·ª´ Promise.all
            collectionIdToNameMap[col.id] = col.title;
        });

        const productCollectsMap = {};
        collectsFromHaravan.forEach(collect => {
            if (collectionIdToNameMap[collect.collection_id]) {
                if (!productCollectsMap[collect.product_id]) {
                    productCollectsMap[collect.product_id] = [];
                }
                productCollectsMap[collect.product_id].push(collect.collection_id);
            }
        });

        // --- B∆∞·ªõc 2: ƒê·ªìng b·ªô Products v√† √°nh x·∫° v·ªõi Smart Collections ---
        if (productsFromHaravan && productsFromHaravan.length > 0) {
            const productOps = productsFromHaravan.map(product => {
                const associatedCollectionIds = [];
                const associatedCollectionNames = [];

                smartCollectionsFromHaravan.forEach(collection => {
                    const { rules, disjunctive } = collection;
                    let isMatch = false;

                    if (disjunctive) {
                        isMatch = rules.some(rule => matchesRule(product, rule));
                    } else {
                        isMatch = rules.every(rule => matchesRule(product, rule));
                    }

                    if (isMatch) {
                        associatedCollectionIds.push(collection.id);
                        associatedCollectionNames.push(collection.title);
                    }
                });

                return {
                    updateOne: {
                        filter: { id: product.id },
                        update: {
                            $set: {
                                ...product,
                                created_at_haravan: product.created_at,
                                updated_at_haravan: product.updated_at,
                                haravan_collection_ids: associatedCollectionIds,
                                haravan_collection_names: associatedCollectionNames,
                                variants: product.variants.map(haravanVariant => {
                                    let newVariant = { ...haravanVariant };
                                    if (haravanVariant.cost === undefined) { 
                                        newVariant.cost = 0; 
                                    }
                                    return newVariant;
                                }),
                            },
                        },
                        upsert: true
                    }
                };
            });
            await Product.bulkWrite(productOps);
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${productsFromHaravan.length} s·∫£n ph·∫©m.`);
        }

        // --- B∆∞·ªõc 3: ƒê·ªìng b·ªô M√£ gi·∫£m gi√° ---
        if (couponsFromHaravan && couponsFromHaravan.length > 0) {
            const couponOps = couponsFromHaravan.map(coupon => ({
                updateOne: {
                    filter: { id: coupon.id },
                    update: { $set: coupon },
                    upsert: true
                }
            }));
            await Coupon.bulkWrite(couponOps); 
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${couponsFromHaravan.length} m√£ gi·∫£m gi√°.`);
        }

        // --- B∆∞·ªõc 4: ƒê·ªìng b·ªô ƒê∆°n h√†ng (C·∫¨P NH·∫¨T: Chu·∫©n h√≥a created_at_haravan) ---
        if (ordersFromHaravan && ordersFromHaravan.length > 0) {
            const orderOps = ordersFromHaravan.map(order => {
                // Parse created_at t·ª´ chu·ªói Haravan (th∆∞·ªùng l√† ISO 8601 UTC)
                const haravanCreatedAtUTC = order.created_at ? new Date(order.created_at) : null;
                
                // Chuy·ªÉn ƒë·ªïi created_at_haravan (UTC) sang m√∫i gi·ªù c·ª•c b·ªô c·ªßa c·ª≠a h√†ng (GMT+7)
                // v√† sau ƒë√≥ t·∫°o m·ªôt Date object m·ªõi t·ª´ ƒë√≥.
                // ƒêi·ªÅu n√†y gi√∫p ƒë·∫£m b·∫£o ng√†y ƒë∆∞·ª£c t√≠nh to√°n ƒë√∫ng theo m√∫i gi·ªù c·ª≠a h√†ng khi l∆∞u tr·ªØ
                const createdDateTimeInStoreTimezone = haravanCreatedAtUTC ? utcToZonedTime(haravanCreatedAtUTC, STORE_TIMEZONE) : null;

                // Log ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã n√†y (debug)
                console.log(`ƒê∆°n h√†ng ${order.id}: created_at_haravan t·ª´ Haravan (UTC): ${haravanCreatedAtUTC?.toISOString()} -> Store Timezone: ${createdDateTimeInStoreTimezone?.toISOString()} (Locale: ${createdDateTimeInStoreTimezone?.toLocaleString('vi-VN', {timeZone: STORE_TIMEZONE})})`);


                return {
                    updateOne: {
                        filter: { id: order.id },
                        update: { 
                            $set: { 
                                ...order, 
                                created_at_haravan: createdDateTimeInStoreTimezone, // L∆∞u Date object ƒë√£ ƒëi·ªÅu ch·ªânh
                                updated_at_haravan: order.updated_at ? utcToZonedTime(new Date(order.updated_at), STORE_TIMEZONE) : null,
                                cancelled_at: order.cancelled_at ? utcToZonedTime(new Date(order.cancelled_at), STORE_TIMEZONE) : null,
                            } 
                        },
                        upsert: true
                    }
                };
            });
            await Order.bulkWrite(orderOps); 
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${ordersFromHaravan.length} ƒë∆°n h√†ng.`);
        }

        // --- B∆∞·ªõc 5: ƒê·ªìng b·ªô Kh√°ch h√†ng ---
        if (customersFromHaravan && customersFromHaravan.length > 0) {
            const customerOps = customersFromHaravan.map(customer => ({
                updateOne: {
                    filter: { id: customer.id },
                    update: { $set: customer },
                    upsert: true
                }
            }));
            await Customer.bulkWrite(customerOps); 
            console.log(`‚úÖ ƒê√£ ƒë·ªìng b·ªô ${customersFromHaravan.length} kh√°ch h√†ng.`);
        }

        res.status(200).json({
            message: 'üéâ ƒê·ªìng b·ªô d·ªØ li·ªáu th√†nh c√¥ng!',
            syncedProducts: productsFromHaravan.length,
            syncedCoupons: couponsFromHaravan.length,
            syncedOrders: ordersFromHaravan.length,
            syncedCustomers: customersFromHaravan.length,
        });

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh ƒë·ªìng b·ªô:', error);
        if (error.response) {
            console.error('Ph·∫£n h·ªìi l·ªói t·ª´ Haravan API:', error.response.data);
        }
        res.status(500).json({ message: 'ƒê·ªìng b·ªô d·ªØ li·ªáu th·∫•t b·∫°i.', error: error.message });
    }
}

module.exports = {
    syncAllData
};
