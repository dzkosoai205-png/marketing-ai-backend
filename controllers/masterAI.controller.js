// ==========================================================
// File: controllers/masterAI.controller.js (File m·ªõi)
// B·ªô n√£o AI To√†n di·ªán, thay th·∫ø cho ai.controller.js c≈©
// ==========================================================
const Order = require('../models/order.model');
const Product = require('../models/product.model');
const DailyReport = require('../models/dailyReport.model.js');
const BusinessSettings = require('../models/businessSettings.model.js');
const FinancialEvent = require('../models/financialEvent.model.js');
const geminiService = require('../services/gemini.service');

async function analyzeOverallBusiness(req, res) {
  console.log('ü§ñ [Master AI] Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ph√¢n t√≠ch to√†n di·ªán...');
  try {
    // B∆∞·ªõc 1: L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt
    const [
        latestReport, 
        settings, 
        upcomingEvents, 
        recentOrders,
        allProducts
    ] = await Promise.all([
        DailyReport.findOne().sort({ report_date: -1 }),
        BusinessSettings.findOne({ shop_id: 'main_settings' }),
        FinancialEvent.find({ due_date: { $gte: new Date() }, is_paid: false }).sort({ due_date: 1 }),
        Order.find({ created_at_haravan: { $gte: new Date(new Date() - 30*24*60*60*1000) } }), // L·∫•y ƒë∆°n trong 30 ng√†y qua
        Product.find({})
    ]);

    if (!latestReport) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o n√†o ƒë·ªÉ ph√¢n t√≠ch.' });
    }

    // X·ª≠ l√Ω d·ªØ li·ªáu t·ªìn kho
    const inventoryStatus = allProducts.map(p => ({
        title: p.title,
        inventory: p.variants.reduce((acc, v) => acc + v.inventory_quantity, 0)
    }));
    const lowStockProducts = inventoryStatus.filter(p => p.inventory > 0 && p.inventory <= 5).slice(0, 5); // C·∫£nh b√°o t·ªìn kho th·∫•p (<= 5)
    
    // T√¨m s·∫£n ph·∫©m b√°n ch·∫≠m (kh√¥ng b√°n ƒë∆∞·ª£c trong 30 ng√†y)
    const soldProductIds = new Set(recentOrders.flatMap(o => o.line_items.map(li => li.product_id)));
    const slowSellers = allProducts
        .filter(p => !soldProductIds.has(p.id) && p.variants.some(v => v.inventory_quantity > 0))
        .map(p => p.title)
        .slice(0, 5);

    // B∆∞·ªõc 2: T·∫°o m·ªôt prompt to√†n di·ªán cho AI
    const prompt = `
      L√† m·ªôt Gi√°m ƒë·ªëc V·∫≠n h√†nh (COO) ·∫£o, h√£y ph√¢n t√≠ch to√†n di·ªán d·ªØ li·ªáu c·ªßa m·ªôt c·ª≠a h√†ng b√°n ƒë·ªì anime v√† tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON.
      
      D·ªØ li·ªáu T√†i ch√≠nh & Kinh doanh:
      - B√°o c√°o h√¥m nay: Doanh thu ${latestReport.total_revenue.toLocaleString('vi-VN')}ƒë, L·ª£i nhu·∫≠n ${latestReport.total_profit.toLocaleString('vi-VN')}ƒë.
      - Chi ph√≠ c·ªë ƒë·ªãnh th√°ng: ${((settings?.monthly_rent_cost || 0) + (settings?.monthly_staff_cost || 0) + (settings?.monthly_marketing_cost || 0) + (settings?.monthly_other_cost || 0)).toLocaleString('vi-VN')}ƒë.
      - M·ª•c ti√™u l·ª£i nhu·∫≠n th√°ng: ${(settings?.monthly_profit_target || 0).toLocaleString('vi-VN')}ƒë.
      - S·ª± ki·ªán chi ti·ªÅn l·ªõn s·∫Øp t·ªõi: ${JSON.stringify(upcomingEvents.map(e => ({name: e.event_name, amount: e.amount, due_date: e.due_date.toLocaleDateString('vi-VN')}))) }.

      D·ªØ li·ªáu V·∫≠n h√†nh & T·ªìn kho:
      - Top 5 s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng (t·ªìn kho <= 5): ${JSON.stringify(lowStockProducts)}.
      - Top 5 s·∫£n ph·∫©m b√°n ch·∫≠m (kh√¥ng b√°n ƒë∆∞·ª£c trong 30 ng√†y): ${JSON.stringify(slowSellers)}.

      D·ª±a v√†o TO√ÄN B·ªò d·ªØ li·ªáu tr√™n, h√£y ƒë∆∞a ra:
      1.  **alerts**: M·ªôt m·∫£ng c√°c c·∫£nh b√°o quan tr·ªçng nh·∫•t (t·ªëi ƒëa 2). M·ªói c·∫£nh b√°o l√† m·ªôt object c√≥ 'type' ('warning' ho·∫∑c 'info') v√† 'message'. ∆Øu ti√™n c·∫£nh b√°o v·ªÅ d√≤ng ti·ªÅn v√† t·ªìn kho.
      2.  **insights**: M·ªôt m·∫£ng g·ªìm 2 nh·∫≠n ƒë·ªãnh s√¢u s·∫Øc v·ªÅ m·ªëi li√™n h·ªá gi·ªØa s·∫£n ph·∫©m b√°n ch·∫°y/ch·∫≠m v√† t√¨nh h√¨nh t√†i ch√≠nh.
      3.  **action_plan**: M·ªôt m·∫£ng g·ªìm 2 ƒë·ªÅ xu·∫•t h√†nh ƒë·ªông c·ª• th·ªÉ cho ng√†y mai ƒë·ªÉ gi·∫£i quy·∫øt c√°c c·∫£nh b√°o v√† c·∫£i thi·ªán kinh doanh. M·ªói ƒë·ªÅ xu·∫•t l√† m·ªôt object c√≥ 'action' (ti√™u ƒë·ªÅ) v√† 'details' (m√¥ t·∫£ chi ti·∫øt).

      C·∫•u tr√∫c JSON tr·∫£ v·ªÅ ph·∫£i l√†:
      {
        "alerts": [ { "type": "warning", "message": "C·∫£nh b√°o v·ªÅ d√≤ng ti·ªÅn ho·∫∑c t·ªìn kho." } ],
        "insights": [ "Nh·∫≠n ƒë·ªãnh 1.", "Nh·∫≠n ƒë·ªãnh 2." ],
        "action_plan": [
          { "action": "Ti√™u ƒë·ªÅ h√†nh ƒë·ªông 1", "details": "M√¥ t·∫£ chi ti·∫øt h√†nh ƒë·ªông 1, v√≠ d·ª•: Nh·∫≠p th√™m h√†ng X, t·∫°o m√£ gi·∫£m gi√° Y..." },
          { "action": "Ti√™u ƒë·ªÅ h√†nh ƒë·ªông 2", "details": "M√¥ t·∫£ chi ti·∫øt h√†nh ƒë·ªông 2." }
        ]
      }
    `;

    const analysisResultText = await geminiService.getAnalysisFromAI(prompt);
    const jsonString = analysisResultText.replace(/```json\n|```/g, '').trim();
    const analysisResultJson = JSON.parse(jsonString);
    res.status(200).json(analysisResultJson);

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch to√†n di·ªán:', error);
    res.status(500).json({ message: 'L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch to√†n di·ªán.', error: error.message });
  }
}

module.exports = {
  analyzeOverallBusiness
};
