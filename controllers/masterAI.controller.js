// ==========================================================
// File: controllers/masterAI.controller.js (ƒê√£ th√™m ch·ª©c nƒÉng AI Chat tr·ª±c ti·∫øp)
// Nhi·ªám v·ª•: X·ª≠ l√Ω logic AI ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu kinh doanh V√Ä chat AI.
// ==========================================================
const { GoogleGenerativeAI } = require('@google/generative-ai');
const DailyReport = require('../models/dailyReport.model'); 
const BusinessSettings = require('../models/businessSettings.model');
const FinancialEvent = require('../models/financialEvent.model');
const Order = require('../models/order.model');
const Product = require('../models/product.model'); 
const Coupon = require('../models/coupon.model');
const Customer = require('../models/customer.model');
const AbandonedCheckout = require('../models/abandonedCheckout.model');
const ChatSession = require('../models/chatSession.model'); // <-- TH√äM: Import ChatSession Model

// L·∫•y API Key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

let geminiModelInstance = null; 

if (GEMINI_API_KEY) {
    try {
        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        geminiModelInstance = genAI.getGenerativeModel({ model: "gemini-2.0-flash" }); 
        console.log("‚úÖ Gemini model 'gemini-2.0-flash' ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.");
    } catch (error) {
        console.error("‚ùå L·ªói khi kh·ªüi t·∫°o Gemini AI Model:", error.message);
        console.warn("C·∫£nh b√°o: T√≠nh nƒÉng AI s·∫Ω kh√¥ng ho·∫°t ƒë·ªông do l·ªói kh·ªüi t·∫°o model.");
    }
} else {
    console.warn("C·∫£nh b√°o: Bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. T√≠nh nƒÉng AI s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.");
}

// =========================================================================
// H√†m tr·ª£ gi√∫p ƒë·ªÉ l·∫•y th√¥ng tin ph√¢n lo·∫°i s·∫£n ph·∫©m (t·∫≠n d·ª•ng Haravan Collections)
// =========================================================================
const getProductCategorization = (product) => {
    let animeGenre = 'Anime/Series Kh√°c'; 
    let productCategory = 'Lo·∫°i Kh√°c'; 

    if (product.haravan_collection_names && product.haravan_collection_names.length > 0) {
        const mainAnimeCollection = product.haravan_collection_names.find(colName => {
            const lowerColName = colName.toLowerCase();
            return !(lowerColName.includes('h√†ng c√≥ s·∫µn') || lowerColName.includes('b√°n ch·∫°y') || lowerColName.includes('h√†ng m·ªõi') || lowerColName.includes('all products')); 
        });

        if (mainAnimeCollection) {
            animeGenre = mainAnimeCollection.trim();
        } else {
            animeGenre = product.haravan_collection_names[0].trim();
        }
    } else {
        const animeGenreMatch = product.title.match(/\[(.*?)\]/);
        animeGenre = animeGenreMatch ? animeGenreMatch[1].trim() : 'Anime/Series Kh√°c (t·ª´ ti√™u ƒë·ªÅ)';
    }

    const predefinedCategories = ["Th·∫ª", "ƒê·ªì b√¥ng", "M√≥c kh√≥a", "M√¥ h√¨nh", "Poster", "Artbook", "√Åo", "Ph·ª• ki·ªán", "G√≥i", "T∆∞·ª£ng", "VƒÉn ph√≤ng ph·∫©m", "ƒê·ªì ch∆°i"]; 
    const lowerCaseTitle = product.title.toLowerCase();

    for (const category of predefinedCategories) {
        if (lowerCaseTitle.includes(category.toLowerCase())) {
            productCategory = category;
            break;
        }
    }
    if (productCategory === 'Lo·∫°i Kh√°c' && product.product_type) {
        productCategory = product.product_type; 
    }
    if (productCategory === 'Lo·∫°i Kh√°c' && product.title.split(' ').length > 0) {
        productCategory = product.title.split(' ')[0].trim();
    }

    return { anime_genre: animeGenre, product_category: productCategory };
};


async function analyzeOverallBusiness(req, res) {
    console.log('ü§ñ [Master AI] Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ph√¢n t√≠ch to√†n di·ªán...');
    
    if (!geminiModelInstance) {
        return res.status(503).json({ message: "D·ªãch v·ª• AI kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh GEMINI_API_KEY v√† logs kh·ªüi t·∫°o model." });
    }

    try {
        const [
            latestReport, 
            settings, 
            upcomingEvents, 
            recentOrders, 
            allProducts, 
            allCoupons,
            allCustomers,
            abandonedCheckouts
        ] = await Promise.all([
            DailyReport.findOne().sort({ report_date: -1 }).lean(), 
            BusinessSettings.findOne({ shop_id: 'main_settings' }).lean(),
            FinancialEvent.find({ due_date: { $gte: new Date() }, is_paid: false }).sort({ due_date: 1 }).lean(),
            Order.find({ created_at_haravan: { $gte: new Date(new Date() - 30*24*60*60*1000) } }).lean(),
            Product.find({}).lean(), // L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m ƒë·∫ßy ƒë·ªß t·ª´ DB
            Coupon.find({}).lean(),
            Customer.find({}).sort({ total_spent: -1 }).lean(),
            AbandonedCheckout.find({ created_at_haravan: { $gte: new Date(new Date() - 7*24*60*60*1000) } }).lean()
        ]);

        if (!latestReport || !latestReport.total_revenue || !latestReport.total_profit) {
            console.warn('‚ö†Ô∏è [Master AI] Kh√¥ng t√¨m th·∫•y b√°o c√°o ho·∫∑c d·ªØ li·ªáu b√°o c√°o kh√¥ng ƒë·∫ßy ƒë·ªß.');
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o cu·ªëi ng√†y ƒë·ªÉ ph√¢n t√≠ch ho·∫∑c b√°o c√°o thi·∫øu d·ªØ li·ªáu doanh thu/l·ª£i nhu·∫≠n. Vui l√≤ng ƒë·∫£m b·∫£o b√°o c√°o cu·ªëi ng√†y ƒë√£ ƒë∆∞·ª£c nh·∫≠p.' });
        }

        const reportDate = new Date(latestReport.report_date);
        const nextDay = new Date(reportDate);
        nextDay.setDate(reportDate.getDate() + 1);
        const todaysOrders = recentOrders.filter(o => new Date(o.created_at_haravan) >= reportDate && new Date(o.created_at_haravan) < nextDay);
        
        const totalRecentRevenue = recentOrders.reduce((sum, order) => sum + order.total_price, 0);
        const daysInPeriod = 30; 
        const averageDailyRevenue = totalRecentRevenue / daysInPeriod;

        const todaysTopProducts = {};
        const todaysUsedCoupons = {};
        todaysOrders.forEach(order => {
            order.line_items.forEach(item => {
                todaysTopProducts[item.title] = (todaysTopProducts[item.title] || 0) + item.quantity;
            });
            order.discount_codes.forEach(coupon => {
                if (coupon && coupon.code) {
                    todaysUsedCoupons[coupon.code] = (todaysUsedCoupons[coupon.code] || 0) + 1;
                }
            });
        });

        const lowStockProducts = allProducts
            .filter(p => p.variants.some(v => v.inventory_quantity > 0 && v.inventory_quantity <= 5))
            .map(p => p.title)
            .slice(0, 5);
            
        const soldProductIdsInRecentOrders = new Set(recentOrders.flatMap(o => o.line_items.map(li => li.product_id)));
        const slowSellers = allProducts
            .filter(p => !soldProductIdsInRecentOrders.has(p.id) && p.variants.some(v => v.inventory_quantity > 0))
            .map(p => p.title)
            .slice(0, 5);

        // --- Ph√¢n t√≠ch hi·ªáu su·∫•t theo Nh√≥m s·∫£n ph·∫©m / Anime v√† lo·∫°i s·∫£n ph·∫©m ---
        const groupPerformance = {}; 
        const productTypePerformanceByGroup = {}; 

        allProducts.forEach(product => {
            const { anime_genre, product_category } = getProductCategorization(product); 

            product.anime_genre = anime_genre;
            product.product_category = product_category;

            const productCreatedAt = new Date(product.created_at_haravan);
            const daysSinceCreation = Math.ceil((new Date() - productCreatedAt) / (1000 * 60 * 60 * 24));
            
            product.variants.forEach(variant => {
                const price = variant.price || 0;
                const cost = variant.cost || 0; 

                const quantitySoldRecent = recentOrders.reduce((sum, order) => {
                    const item = order.line_items.find(li => li.variant_id === variant.id);
                    return sum + (item ? item.quantity : 0);
                }, 0);

                const productRevenueRecent = quantitySoldRecent * price;
                const productProfitRecent = quantitySoldRecent * (price - cost); 

                if (!groupPerformance[product.anime_genre]) { 
                    groupPerformance[product.anime_genre] = { 
                        total_revenue_recent: 0, 
                        total_profit_recent: 0, 
                        total_quantity_recent: 0, 
                        total_products: 0,
                        product_types_summary: {} 
                    };
                }
                groupPerformance[product.anime_genre].total_revenue_recent += productRevenueRecent;
                groupPerformance[product.anime_genre].total_profit_recent += productProfitRecent;
                groupPerformance[product.anime_genre].total_quantity_recent += quantitySoldRecent;
                groupPerformance[product.anime_genre].total_products += 1; 

                if (!productTypePerformanceByGroup[product.anime_genre]) {
                    productTypePerformanceByGroup[product.anime_genre] = {};
                }
                if (!productTypePerformanceByGroup[product.anime_genre][product.product_category]) {
                    productTypePerformanceByGroup[product.anime_genre][product.product_category] = { 
                        total_revenue_recent: 0, 
                        total_profit_recent: 0, 
                        total_quantity_recent: 0, 
                        product_count: 0 
                    };
                }
                productTypePerformanceByGroup[product.anime_genre][product.product_category].total_revenue_recent += productRevenueRecent;
                productTypePerformanceByGroup[product.anime_genre][product.product_category].total_profit_recent += productProfitRecent;
                productTypePerformanceByGroup[product.anime_genre][product.product_category].total_quantity_recent += quantitySoldRecent;
                productTypePerformanceByGroup[product.anime_genre][product.product_category].product_count += 1;

                if (!groupPerformance[product.anime_genre].product_types_summary[product.product_category]) {
                    groupPerformance[product.anime_genre].product_types_summary[product.product_category] = { 
                        total_revenue_recent: 0, 
                        total_profit_recent: 0, 
                        total_quantity_recent: 0, 
                        product_count: 0 
                    };
                }
                groupPerformance[product.anime_genre].product_types_summary[product.product_category].total_revenue_recent += productRevenueRecent;
                groupPerformance[product.anime_genre].product_types_summary[product_category].total_profit_recent += productProfitRecent;
                groupPerformance[product.anime_genre].product_types_summary[product_category].total_quantity_recent += quantitySoldRecent;
                groupPerformance[product.anime_genre].product_types_summary[product_category].product_count += 1;
            });
        });

        const productDetailsForAI = allProducts.map(p => {
            const { anime_genre, product_category } = getProductCategorization(p);
            const productCreatedAt = new Date(p.created_at_haravan);
            const daysSinceCreation = Math.ceil((new Date() - productCreatedAt) / (1000 * 60 * 60 * 24));
            
            const totalQuantitySoldRecentOfProduct = recentOrders.reduce((sum, order) => {
                const item = order.line_items.find(li => li.product_id === p.id);
                return sum + (item ? item.quantity : 0);
            }, 0);

            const totalVariantPrice = p.variants.reduce((sum, v) => sum + (v.price || 0), 0); 
            const totalVariantCost = p.variants.reduce((sum, v) => sum + (v.cost || 0), 0); 
            const avgPrice = p.variants.length > 0 ? (totalVariantPrice / p.variants.length) : 0;
            const avgCost = p.variants.length > 0 ? (totalVariantCost / p.variants.length) : 0;
            
            const totalRevenueRecentOfProduct = totalQuantitySoldRecentOfProduct * avgPrice;
            const totalProfitRecentOfProduct = totalQuantitySoldRecentOfProduct * (avgPrice - avgCost);

            const isLowStock = lowStockProducts.includes(p.title);
            const isSlowSeller = slowSellers.includes(p.title);

            return {
                id: p.id,
                title: p.title,
                anime_genre: anime_genre, 
                product_category: product_category, 
                haravan_collection_names: p.haravan_collection_names || [], 
                current_inventory: p.variants.reduce((sum, v) => sum + (v.inventory_quantity || 0), 0),
                price: avgPrice,
                cost: avgCost,
                days_since_creation: daysSinceCreation,
                total_quantity_sold_recent: totalQuantitySoldRecentOfProduct,
                total_revenue_recent: totalRevenueRecentOfProduct,         
                total_profit_recent: totalProfitRecentOfProduct,           
                is_low_stock: isLowStock,
                is_slow_seller: isSlowSeller
            };
        });

        const customerDetailsForAI = allCustomers.map(c => ({
            id: c.id,
            name: `${c.first_name || ''} ${c.last_name || ''}`.trim(),
            email: c.email,
            total_spent: c.total_spent,
            orders_count: c.orders_count
        }));
        
        const prompt = `
L√† m·ªôt Gi√°m ƒë·ªëc V·∫≠n h√†nh (COO) v√† Gi√°m ƒë·ªëc Marketing (CMO) c·∫•p cao cho m·ªôt c·ª≠a h√†ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ chuy√™n b√°n ƒë·ªì anime. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch to√†n di·ªán d·ªØ li·ªáu kinh doanh, ƒë∆∞a ra c√°c ƒë·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c chi ti·∫øt, c√≥ th·ªÉ h√†nh ƒë·ªông ƒë∆∞·ª£c, nh·∫±m t·ªëi ∆∞u h√≥a doanh thu, l·ª£i nhu·∫≠n, v√† hi·ªáu qu·∫£ ho·∫°t ƒë·ªông marketing. B·∫°n c·∫ßn xem x√©t c·∫£ t√¨nh h√¨nh t√†i ch√≠nh, v·∫≠n h√†nh, t·ªìn kho v√† h√†nh vi kh√°ch h√†ng.
**M·ª•c ti√™u c·ªët l√µi:**
- Ph√¢n t√≠ch s√¢u s·∫Øc d·ªØ li·ªáu ƒë·ªÉ ƒë∆∞a ra c√°c insight c√≥ gi√° tr·ªã.
- ƒê·ªÅ xu·∫•t c√°c h√†nh ƒë·ªông c·ª• th·ªÉ, c√°c m√£ gi·∫£m gi√° m·ªõi (h√†ng ng√†y v√† theo s·ª± ki·ªán), v√† c√°c chi·∫øn d·ªãch email marketing t·ª± ƒë·ªông.
- **M·ªçi ƒë·ªÅ xu·∫•t m√£ gi·∫£m gi√° c·∫ßn ƒë∆∞·ª£c t√≠nh to√°n ƒë·ªÉ ƒê·∫¢M B·∫¢O L·ª¢I NHU·∫¨N TR√äN M·ªñI S·∫¢N PH·∫®M TRUNG B√åNH L√Ä 30% (bi√™n l·ª£i nhu·∫≠n c·ªßa b·∫°n).** N·∫øu m·ªôt ƒë·ªÅ xu·∫•t m√£ gi·∫£m gi√° l√†m gi·∫£m l·ª£i nhu·∫≠n d∆∞·ªõi ng∆∞·ª°ng n√†y, h√£y gi·∫£i th√≠ch r·ªßi ro ho·∫∑c ƒë·ªÅ xu·∫•t c√°ch b√π ƒë·∫Øp.

**D·ªØ li·ªáu cung c·∫•p:**
- **B√°o c√°o t√†i ch√≠nh & kinh doanh (H√¥m nay ${latestReport.report_date.toLocaleDateString('vi-VN')}):**
  - Doanh thu ${latestReport.total_revenue.toLocaleString('vi-VN')}ƒë, L·ª£i nhu·∫≠n ${latestReport.total_profit.toLocaleString('vi-VN')}ƒë.
  - Chi ph√≠ c·ªë ƒë·ªãnh th√°ng (∆∞·ªõc t√≠nh): ${((settings?.monthly_rent_cost || 0) + (settings?.monthly_staff_cost || 0) + (settings?.monthly_marketing_cost || 0) + (settings?.monthly_other_cost || 0)).toLocaleString('vi-VN')}ƒë.
  - M·ª•c ti√™u l·ª£i nhu·∫≠n th√°ng: ${(settings?.monthly_profit_target || 0).toLocaleString('vi-VN')}ƒë.
  - Doanh thu trung b√¨nh h√†ng ng√†y (30 ng√†y qua): ${averageDailyRevenue.toLocaleString('vi-VN')}ƒë.
  - S·ª± ki·ªán chi ti·ªÅn l·ªõn s·∫Øp t·ªõi: ${JSON.stringify(upcomingEvents.map(e => ({
      name: e.event_name, 
      amount: e.amount, 
      due_date: e.due_date.toLocaleDateString('vi-VN'), 
      days_left: Math.ceil((new Date(e.due_date) - new Date()) / (1000 * 60 * 60 * 24)) 
    })))}.
  - **Ph√¢n t√≠ch t√†i ch√≠nh cho S·ª± ki·ªán s·∫Øp t·ªõi:**
    - T·ªïng chi ph√≠ s·∫Øp t·ªõi: ${upcomingEvents.reduce((sum, e) => sum + e.amount, 0).toLocaleString('vi-VN')}ƒë.
    - Doanh thu c·∫ßn ki·∫øm th√™m m·ªói ng√†y ƒë·ªÉ ƒë·ªß chi ph√≠ (n·∫øu doanh thu trung b√¨nh hi·ªán t·∫°i kh√¥ng ƒë·ªß): 
      ${(upcomingEvents.length > 0 && upcomingEvents[0].days_left > 0 && upcomingEvents.reduce((sum, e) => sum + e.amount, 0) > (averageDailyRevenue * upcomingEvents[0].days_left)) 
        ? ((upcomingEvents.reduce((sum, e) => sum + e.amount, 0) - (averageDailyRevenue * upcomingEvents[0].days_left)) / upcomingEvents[0].days_left).toLocaleString('vi-VN') + 'ƒë/ng√†y' 
        : 'Kh√¥ng c·∫ßn lo l·∫Øng d·ª±a tr√™n doanh thu hi·ªán t·∫°i ho·∫∑c kh√¥ng c√≥ s·ª± ki·ªán.'}.

- **D·ªØ li·ªáu V·∫≠n h√†nh & T·ªìn kho (Trong 30 ng√†y qua, c·∫≠p nh·∫≠t h√¥m nay):**
  - Top 5 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t H√îM NAY (s·ªë l∆∞·ª£ng): ${JSON.stringify(Object.entries(todaysTopProducts).sort((a, b) => b[1] - a[1]).slice(0, 5))}.
  - C√°c m√£ gi·∫£m gi√° ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng H√îM NAY (s·ªë l∆∞·ª£t): ${JSON.stringify(todaysUsedCoupons)}.
  - Top 5 s·∫£n ph·∫©m b√°n ch·∫≠m (kh√¥ng b√°n ƒë∆∞·ª£c trong 30 ng√†y qua, c√≤n t·ªìn): ${JSON.stringify(slowSellers)}.
  - **Ph√¢n t√≠ch hi·ªáu su·∫•t theo Nh√≥m s·∫£n ph·∫©m (t·ª´ Haravan Collections - T·ªïng quan 30 ng√†y):** ${JSON.stringify(Object.entries(groupPerformance).map(([group, data]) => ({ group, ...data })))}.
  - **Ph√¢n t√≠ch hi·ªáu su·∫•t theo Lo·∫°i S·∫£n ph·∫©m trong t·ª´ng Nh√≥m s·∫£n ph·∫©m (T·ªïng quan 30 ng√†y):** ${JSON.stringify(Object.entries(productTypePerformanceByGroup).map(([group, types]) => ({ group, types: Object.entries(types).map(([type, data]) => ({ type, ...data })) })))}.
  - **Chi ti·∫øt t·∫•t c·∫£ s·∫£n ph·∫©m (bao g·ªìm product_group, product_category, haravan_collection_names, gi√°, gi√° v·ªën, ng√†y t·∫°o, s·ªë l∆∞·ª£ng b√°n trong 30 ng√†y, doanh thu, l·ª£i nhu·∫≠n, t·ªìn kho, b√°n ch·∫≠m):** ${JSON.stringify(productDetailsForAI)}.

- **D·ªØ li·ªáu Khuy·∫øn m√£i & Kh√°ch h√†ng (T·ªïng th·ªÉ v√† g·∫ßn ƒë√¢y):**
  - T·ªïng s·ªë m√£ gi·∫£m gi√° ƒëang c√≥: ${allCoupons.length}.
  - Top 5 kh√°ch h√†ng chi ti√™u nhi·ªÅu nh·∫•t (theo t·ªïng chi ti√™u): ${JSON.stringify(allCustomers.slice(0, 5).map(c => ({name: c.first_name + ' ' + c.last_name, total_spent: c.total_spent})))}.
  - **Chi ti·∫øt t·∫•t c·∫£ kh√°ch h√†ng:** ${JSON.stringify(customerDetailsForAI)}.
  - S·ªë l∆∞·ª£ng gi·ªè h√†ng b·ªã b·ªè qu√™n trong 7 ng√†y qua: ${abandonedCheckouts.length}.
  - Bi√™n l·ª£i nhu·∫≠n trung b√¨nh tr√™n m·ªói s·∫£n ph·∫©m: 30%. (ƒê√¢y l√† d·ªØ li·ªáu quan tr·ªçng cho c√°c t√≠nh to√°n v·ªÅ m√£ gi·∫£m gi√°).

**PH√ÇN T√çCH CHUY√äN S√ÇU & ƒê·ªÄ XU·∫§T C√ì H√ÄNH ƒê·ªòNG (Vui l√≤ng tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng JSON C√ì C·∫§U TR√öC R√ï R√ÄNG V√Ä CH√çNH X√ÅC SAU. ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu ph·∫£i c√≥ m·∫∑t v√† kh√¥ng r·ªóng. N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch s√¢u, h√£y ƒëi·ªÅn "N/A", "Kh√¥ng c√≥ d·ªØ li·ªáu", ho·∫∑c m·∫£ng r·ªóng [] v√† gi·∫£i th√≠ch l√Ω do ng·∫Øn g·ªçn):**
\`\`\`json
{
  "alerts": [
    { 
      "type": "warning | info | critical", 
      "message": "C·∫£nh b√°o quan tr·ªçng nh·∫•t v·ªÅ t√¨nh h√¨nh kinh doanh, d√≤ng ti·ªÅn, t·ªìn kho, doanh s·ªë. V√≠ d·ª•: 'D√≤ng ti·ªÅn c√≥ th·ªÉ g·∫∑p v·∫•n ƒë·ªÅ n·∫øu kh√¥ng ƒë·∫°t doanh thu X ƒë·ªÉ b√π ƒë·∫Øp chi ph√≠ s·∫Øp t·ªõi Y.' T·ªëi ƒëa 2 c·∫£nh b√°o." 
    }
  ],
  "insights": [
    { "title": "Ti√™u ƒë·ªÅ Insight 1", "description": "Nh·∫≠n ƒë·ªãnh s√¢u s·∫Øc 1. H√£y t√¨m m·ªëi li√™n h·ªá gi·ªØa c√°c b·ªô d·ªØ li·ªáu kh√°c nhau (v√≠ d·ª•: m√£ gi·∫£m gi√° X kh√¥ng hi·ªáu qu·∫£ tr√™n s·∫£n ph·∫©m Y b√°n ch·∫≠m, kh√°ch h√†ng VIP kh√¥ng mua s·∫£n ph·∫©m m·ªõi). Ph√¢n t√≠ch hi·ªáu su·∫•t t·ª´ng nh√≥m s·∫£n ph·∫©m (t·ª´ haravan_collection_names) v√† lo·∫°i s·∫£n ph·∫©m trong nh√≥m ƒë√≥. ƒê∆∞a ra l√Ω do ho·∫∑c xu h∆∞·ªõng r√µ r√†ng." },
    { "title": "Ti√™u ƒë·ªÅ Insight 2", "description": "Nh·∫≠n ƒë·ªãnh s√¢u s·∫Øc 2. V√≠ d·ª•: 'Nh√≥m s·∫£n ph·∫©m [T√™n Nh√≥m] ƒëang c√≥ doanh s·ªë v∆∞·ª£t tr·ªôi, ƒë·∫∑c bi·ªát ·ªü s·∫£n ph·∫©m [Lo·∫°i s·∫£n ph·∫©m], c·∫ßn ƒë·∫©y m·∫°nh marketing cho c√°c s·∫£n ph·∫©m li√™n quan'." },
    { "title": "Ti√™u ƒë·ªÅ Insight 3", "description": "Nh·∫≠n ƒë·ªãnh s√¢u s·∫Øc 3. V√≠ d·ª•: 'Kh√°ch h√†ng VIP [T√™n kh√°ch h√†ng] ƒë√£ chi ti√™u nhi·ªÅu nh∆∞ng ch∆∞a t∆∞∆°ng t√°c v·ªõi c√°c ∆∞u ƒë√£i m·ªõi nh·∫•t, c·∫ßn c√° nh√¢n h√≥a marketing'." },
    { "title": "Insight 4: Ph√¢n t√≠ch D√≤ng ti·ªÅn s·ª± ki·ªán s·∫Øp t·ªõi", "description": "D·ª±a tr√™n doanh thu trung b√¨nh hi·ªán t·∫°i v√† chi ph√≠ c·ªë ƒë·ªãnh/s·ª± ki·ªán s·∫Øp t·ªõi, ph√¢n t√≠ch kh·∫£ nƒÉng ƒë·∫°t m·ª•c ti√™u t√†i ch√≠nh v√† ƒë·ªÅ xu·∫•t doanh thu c·∫ßn thi·∫øt h√†ng ng√†y ƒë·ªÉ b√π ƒë·∫Øp. N·∫øu thi·∫øu, h√£y n√™u r√µ r·ªßi ro v√† c·∫ßn t·∫≠p trung v√†o s·∫£n ph·∫©m n√†o (b√°n ch·∫°y/y·∫øu) ƒë·ªÉ b√π ƒë·∫Øp."}
  ],
  "action_plan": [
    { 
      "action": "Ti√™u ƒë·ªÅ h√†nh ƒë·ªông 1", 
      "details": "M√¥ t·∫£ chi ti·∫øt h√†nh ƒë·ªông 1 (v√≠ d·ª•: 'Nh·∫≠p th√™m 50 s·∫£n ph·∫©m X v√¨ t·ªìn kho th·∫•p v√† b√°n ch·∫°y', 'T·∫°o chi·∫øn d·ªãch x·∫£ h√†ng cho Y').",
      "priority": "High | Medium | Low",
      "category": "Inventory | Marketing | Financial | Customer" 
    },
    { "action": "Ti√™u ƒë·ªÅ h√†nh ƒë·ªông 2", "details": "M√¥ t·∫£ chi ti·∫øt h√†nh ƒë·ªông 2.", "priority": "High | Medium | Low", "category": "Inventory | Marketing | Financial | Customer" },
    { "action": "Ti√™u ƒë·ªÅ h√†nh ƒë·ªông 3", "details": "M√¥ t·∫£ chi ti·∫øt h√†nh ƒë·ªông 3.", "priority": "High | Medium | Low", "category": "Inventory | Marketing | Financial | Customer" }
  ],
  "daily_coupon_suggestion": {
    "code": "MA_MOI_HANG_NGAY",
    "value": "Gi√° tr·ªã gi·∫£m gi√° (v√≠ d·ª•: 10% ho·∫∑c 20000)", 
    "type": "percentage | fixed_amount | free_shipping",
    "min_order_value": "Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu ƒë·ªÉ √°p d·ª•ng (VD: 150000)",
    "target_product_titles": [], // Danh s√°ch T√äN s·∫£n ph·∫©m c·ª• th·ªÉ n·∫øu m√£ ch·ªâ √°p d·ª•ng cho m·ªôt s·ªë s·∫£n ph·∫©m (n·∫øu kh√¥ng, ƒë·ªÉ tr·ªëng)
    "reason": "Gi·∫£i th√≠ch l√Ω do ƒë·ªÅ xu·∫•t m√£ n√†y d·ª±a tr√™n h√†nh vi kh√°ch h√†ng 2-3 ng√†y qua (v√≠ d·ª•: s·∫£n ph·∫©m b√°n ch·∫≠m, gi·ªè h√†ng b·ªã b·ªè qu√™n) V√Ä T√çNH TO√ÅN R√ï R√ÄNG L·ª¢I NHU·∫¨N ƒê·ªÇ ƒê·∫¢M B·∫¢O KH√îNG L·ªñ. VD: 'M√£ gi·∫£m 10% tr√™n ƒë∆°n 200k s·∫Ω gi·ªØ l·ª£i nhu·∫≠n ·ªü 20%, k√≠ch th√≠ch mua h√†ng ch·∫≠m. N·∫øu kh√¥ng th·ªÉ duy tr√¨ 30% l·ª£i nhu·∫≠n, c·∫ßn n√™u r√µ l·ª£i nhu·∫≠n d·ª± ki·∫øn'."
  },
  "event_campaign_plan": {
    "event_name": "T√™n s·ª± ki·ªán (v√≠ d·ª•: Ng√†y ƒê√¥i 8/8, Trung Thu)",
    "date": "Ng√†y di·ªÖn ra s·ª± ki·ªán (v√≠ d·ª•: 2025-08-08)",
    "theme": "Ch·ªß ƒë·ªÅ ch√≠nh c·ªßa chi·∫øn d·ªãch",
    "target_audience": "ƒê·ªëi t∆∞·ª£ng m·ª•c ti√™u (v√≠ d·ª•: Kh√°ch h√†ng VIP, Kh√°ch h√†ng m·ªõi, Kh√°ch h√†ng b·ªè qu√™n gi·ªè h√†ng)",
    "proposed_coupon": {
      "code": "MA_SU_KIEN",
      "value": "Gi√° tr·ªã gi·∫£m gi√°",
      "type": "percentage | fixed_amount | free_shipping",
      "min_order_value": "Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu",
      "target_customer_segments": [], 
      "reason": "L√Ω do ƒë·ªÅ xu·∫•t m√£ n√†y d·ª±a tr√™n h√†nh vi kh√°ch h√†ng 1 th√°ng g·∫ßn nh·∫•t v√† m·ª•c ti√™u l·ª£i nhu·∫≠n (30% trung b√¨nh). ƒê·∫£m b·∫£o m√£ kh√¥ng l√†m l·ªó ƒë∆°n h√†ng."
    },
    "promotion_channels": [ "Email", "Facebook Ads", "Website Banner" ],
    "key_messages": [ "Th√¥ng ƒëi·ªáp ch√≠nh 1", "Th√¥ng ƒëi·ªáp ch√≠nh 2" ]
  },
  "abandoned_cart_emails": [
    { 
      "customer_email": "email_khach_hang", 
      "subject": "Ch·ªß ƒë·ªÅ email (v√≠ d·ª•: Gi·ªè h√†ng c·ªßa b·∫°n ƒëang ch·ªù!)", 
      "body_snippet": "ƒêo·∫°n n·ªôi dung ch√≠nh c·ªßa email, bao g·ªìm l·ªùi nh·∫Øc, m√£ gi·∫£m gi√° ƒë·ªÅ xu·∫•t (v√≠ d·ª•: MABOHANG, gi·∫£m X% ho·∫∑c Y VND), v√† k√™u g·ªçi h√†nh ƒë·ªông. Nh·∫•n m·∫°nh ∆∞u ƒë√£i ƒë·ªÉ k√≠ch th√≠ch mua h√†ng. ƒê·∫£m b·∫£o m√£ kh√¥ng l√†m l·ªó ƒë∆°n h√†ng v·ªõi bi√™n l·ª£i nhu·∫≠n 30%."
    }
  ],
  "anime_performance_summary": { 
    "overall_insights": "Ph√¢n t√≠ch t·ªïng quan c√°c nh√≥m s·∫£n ph·∫©m (t·ª´ haravan_collection_names) n√†o ƒëang b√°n t·ªët/y·∫øu v√† l√Ω do c√≥ th·ªÉ (d·ª±a tr√™n s·∫£n ph·∫©m, doanh thu, s·ªë l∆∞·ª£ng b√°n).",
    "detailed_breakdown": [
      {
        "product_group": "T√™n Nh√≥m s·∫£n ph·∫©m (t·ª´ Haravan Collection)",
        "performance_summary": "T√≥m t·∫Øt hi·ªáu su·∫•t (t·ªët, trung b√¨nh, y·∫øu), t·ªïng doanh thu, t·ªïng s·ªë l∆∞·ª£ng b√°n g·∫ßn ƒë√¢y.",
        "product_type_performance": [ 
          {
            "product_type": "ƒê·ªì b√¥ng | Th·∫ª | M√¥ h√¨nh",
            "performance": "T·ªët | Y·∫øu",
            "recommendation": "ƒê·ªÅ xu·∫•t nh·∫≠p th√™m / d·ª´ng nh·∫≠p / ƒë·∫©y h√†ng t·ªìn v·ªõi m√£ gi·∫£m gi√° (c√≥ t√≠nh to√°n l·ª£i nhu·∫≠n). V√≠ d·ª•: 'D·ª´ng nh·∫≠p ƒë·ªì b√¥ng [T√™n Nh√≥m] v√¨ b√°n y·∫øu d√π ƒë√£ t·∫°o t·ª´ l√¢u v√† gi√° cao. N√™n ƒë·∫©y h√†ng t·ªìn v·ªõi m√£ FREESHIP'."
          }
        ]
      }
    ]
  },
  "customer_loyalty_strategies": [ 
    {
      "strategy_name": "T√™n chi·∫øn l∆∞·ª£c (v√≠ d·ª•: G√≥i qu√† t·∫∑ng VIP, ∆Øu ƒë√£i sinh nh·∫≠t)",
      "target_customers_segment": "Ph√¢n kh√∫c kh√°ch h√†ng m·ª•c ti√™u (v√≠ d·ª•: Top 10 kh√°ch h√†ng chi ti√™u nhi·ªÅu nh·∫•t)",
      "details": "M√¥ t·∫£ chi ti·∫øt c√°ch th·ª±c hi·ªán, bao g·ªìm m√£ gi·∫£m gi√° (n·∫øu c√≥, t√≠nh to√°n l·ª£i nhu·∫≠n), ho·∫∑c c√°c ∆∞u ƒë√£i ƒë·∫∑c bi·ªát ƒë·ªÉ tƒÉng l√≤ng trung th√†nh.",
      "estimated_impact": "∆Ø·ªõc t√≠nh t√°c ƒë·ªông (v√≠ d·ª•: TƒÉng 10% t·∫ßn su·∫•t mua h√†ng c·ªßa nh√≥m kh√°ch VIP)."
    }
  ]
}
\`\`\`
**H√£y ƒë·∫£m b·∫£o to√†n b·ªô ph·∫£n h·ªìi l√† m·ªôt JSON h·ª£p l·ªá v√† tu√¢n th·ªß c·∫•u tr√∫c tr√™n. Kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n gi·∫£i th√≠ch n√†o b√™n ngo√†i kh·ªëi JSON. N·∫øu c√≥ d·ªØ li·ªáu thi·∫øu, h√£y ƒëi·ªÅn c√°c tr∆∞·ªùng l√† N/A ho·∫∑c [] nh∆∞ng v·∫´n gi·ªØ nguy√™n c·∫•u tr√∫c.**
        `;

        const result = await geminiModelInstance.generateContent(prompt);
        const response = await result.response;
        const textResponse = response.text();

        console.log('Ph·∫£n h·ªìi RAW t·ª´ Gemini:', textResponse); 

        let analysisResultJson;
        try {
            const jsonString = textResponse.replace(/```json\n|```/g, '').trim();
            analysisResultJson = JSON.parse(jsonString);
        } catch (parseError) {
            console.error('‚ùå L·ªói parsing JSON t·ª´ Gemini:', parseError.message);
            console.error('Ph·∫£n h·ªìi Gemini kh√¥ng ph·∫£i JSON h·ª£p l·ªá:', textResponse);
            return res.status(500).json({ message: 'L·ªói parsing ph·∫£n h·ªìi AI. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng output c·ªßa AI.', rawResponse: textResponse });
        }

        res.status(200).json(analysisResultJson);

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch to√†n di·ªán:', error);
        res.status(500).json({ message: 'L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch to√†n di·ªán.', error: error.message });
    }
}

// Export h√†m ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng trong router
module.exports = {
    analyzeOverallBusiness
};
