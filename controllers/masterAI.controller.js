// ==========================================================
// File: controllers/masterAI.controller.js
// Nhi·ªám v·ª•: X·ª≠ l√Ω logic AI ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu kinh doanh V√Ä chat AI.
// PHI√äN B·∫¢N N√ÇNG C·∫§P HO√ÄN CH·ªàNH: Bi·∫øn AI th√†nh m·ªôt C·ªë v·∫•n Chi·∫øn l∆∞·ª£c & TƒÉng tr∆∞·ªüng.
// T·ªëi ∆∞u h√≥a: G·ªôp c√°c l·ªánh g·ªçi API ƒë·ªÉ tr√°nh l·ªói quota v√† tƒÉng hi·ªáu qu·∫£.
// ==========================================================
const { GoogleGenerativeAI } = require('@google/generative-ai');
const DailyReport = require('../models/dailyReport.model');
const BusinessSettings = require('../models/businessSettings.model');
const FinancialEvent = require('../models/financialEvent.model');
const Order = require('../models/order.model');
const Product = require('../models/product.model');
const Coupon = require('../models/coupon.model');
const Customer = require('../models/customer.model');
const AbandonedCheckout = require('../models/abandonedCheckout.model');
const ChatSession = require('../models/chatSession.model');


const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
let geminiModelInstance = null;

if (GEMINI_API_KEY) {
    try {
        const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
        geminiModelInstance = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
        console.log("‚úÖ Gemini model 'gemini-2.0-flash' ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.");
    } catch (error) {
        console.error("‚ùå L·ªói khi kh·ªüi t·∫°o Gemini AI Model:", error.message);
    }
} else {
    console.warn("C·∫£nh b√°o: Bi·∫øn m√¥i tr∆∞·ªùng GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.");
}

// ==========================================================
// H√ÄM PH√ÇN T√çCH KINH DOANH CH√çNH (ƒê√É T·ªêI ∆ØU H√ìA)
// ==========================================================
const analyzeOverallBusiness = async (req, res) => {
    console.log('ü§ñ [Strategic AI] Nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ph√¢n t√≠ch chi·∫øn l∆∞·ª£c chuy√™n s√¢u...');
    if (!geminiModelInstance) {
        return res.status(503).json({ message: "D·ªãch v·ª• AI kh√¥ng kh·∫£ d·ª•ng." });
    }

    const { report_date: selectedReportDateString } = req.body;
    if (!selectedReportDateString) {
        return res.status(400).json({ message: 'Thi·∫øu tham s·ªë ng√†y b√°o c√°o (report_date).' });
    }

    try {
        // B∆Ø·ªöC 1: L·∫§Y D·ªÆ LI·ªÜU TH√î
        const queryDateForDailyReport = new Date(selectedReportDateString);
        queryDateForDailyReport.setUTCHours(0, 0, 0, 0);

        const [
            reportForAnalysis, settings, upcomingEvents, recentOrders, allProducts,
            allCoupons, allCustomers, abandonedCheckouts
        ] = await Promise.all([
            DailyReport.findOne({ report_date: queryDateForDailyReport }).lean(),
            BusinessSettings.findOne({ shop_id: 'main_settings' }).lean(),
            FinancialEvent.find({ due_date: { $gte: new Date() }, is_paid: false }).sort({ due_date: 1 }).lean(),
            Order.find({ created_at_haravan: { $gte: new Date(new Date().getTime() - 30 * 24 * 60 * 60 * 1000) } }).lean(),
            Product.find({}).lean(),
            Coupon.find({}).lean(),
            Customer.find({}).sort({ total_spent: -1 }).lean(),
            AbandonedCheckout.find({ created_at_haravan: { $gte: new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000) } }).lean()
        ]);

        // B∆Ø·ªöC 2: L√ÄM GI√ÄU D·ªÆ LI·ªÜU (TR∆Ø·ªöC KHI G·ª¨I CHO AI)
        const customerDetailsForAI = allCustomers.map(c => {
            const lastOrderDate = c.last_order_name ? new Date(c.updated_at) : null;
            const daysSinceLastOrder = lastOrderDate ? Math.ceil((new Date() - lastOrderDate) / (1000 * 60 * 60 * 24)) : null;
            return {
                id: c.id,
                name: `${c.first_name || ''} ${c.last_name || ''}`.trim(),
                total_spent: c.total_spent,
                orders_count: c.orders_count,
                membership_tier: c.haravan_segments && c.haravan_segments.length > 0 ? c.haravan_segments[0] : 'Th√†nh vi√™n m·ªõi',
                days_since_last_order: daysSinceLastOrder,
                behavioral_segment: daysSinceLastOrder === null ? 'New' : (daysSinceLastOrder > 90 ? 'At Risk' : 'Active')
            };
        });

        const productDetailsForAI = allProducts.map(p => {
            let totalInventory = 0;
            let totalCost = 0;
            p.variants.forEach(v => {
                totalInventory += (v.inventory_quantity || 0);
                totalCost += (v.inventory_quantity || 0) * (v.cost || 0);
            });
            const quantitySoldRecent = recentOrders.reduce((sum, order) => {
                const item = order.line_items.find(li => li.product_id === p.id);
                return sum + (item ? item.quantity : 0);
            }, 0);
            return {
                id: p.id,
                title: p.title, // G·ª≠i ti√™u ƒë·ªÅ th√¥
                haravan_collections: p.haravan_collection_names || [], // G·ª≠i collection th√¥
                current_inventory: totalInventory,
                total_inventory_cost: totalCost,
                quantity_sold_recent: quantitySoldRecent,
                is_slow_seller: quantitySoldRecent === 0 && totalInventory > 0
            };
        });

        const abandonedCheckoutsForAI = abandonedCheckouts.slice(0, 5).map(ac => ({
            customer_email: ac.email,
            total_price: ac.total_price,
            items: ac.line_items.map(item => ({ title: item.title, quantity: item.quantity }))
        }));

        const existingCouponsForAI = allCoupons.map(c => ({
            code: c.code,
            type: c.discount_type,
            value: c.value
        }));
        
        const reportDataForAI = reportForAnalysis || { total_revenue: 0, total_profit: 0, notes: "Kh√¥ng c√≥ b√°o c√°o." };


        // ==========================================================
        // PROMPT N√ÇNG C·∫§P - G·ªòP 2 NHI·ªÜM V·ª§ V√ÄO 1
        // ==========================================================
        const prompt = `
B·∫°n l√† m·ªôt C·ªë v·∫•n Chi·∫øn l∆∞·ª£c & TƒÉng tr∆∞·ªüng (Strategic Advisor & Growth Hacker) cho m·ªôt c·ª≠a h√†ng e-commerce chuy√™n v·ªÅ ƒë·ªì anime. Vai tr√≤ c·ªßa b·∫°n l√† **T∆Ø V·∫§N, ƒê·ªäNH H∆Ø·ªöNG v√† X√ÇY D·ª∞NG K·∫æ HO·∫†CH H√ÄNH ƒê·ªòNG**. B·∫°n ph·∫£i suy nghƒ© s√¢u, k·∫øt n·ªëi c√°c ƒëi·ªÉm d·ªØ li·ªáu r·ªùi r·∫°c ƒë·ªÉ t·∫°o ra m·ªôt b·ª©c tranh to√†n c·∫£nh v√† ƒë∆∞a ra nh·ªØng chi·∫øn l∆∞·ª£c c√≥ t√≠nh ƒë·ªôt ph√°, kh·∫£ thi cao.

**B∆Ø·ªöC ƒê·∫¶U TI√äN TRONG SUY NGHƒ® C·ª¶A B·∫†N (QUAN TR·ªåNG):**
Tr∆∞·ªõc khi ph√¢n t√≠ch, h√£y t·ª± ph√¢n lo·∫°i c√°c s·∫£n ph·∫©m trong 'd·ªØ li·ªáu s·∫£n ph·∫©m' ƒë∆∞·ª£c cung c·∫•p. V·ªõi m·ªói s·∫£n ph·∫©m, h√£y x√°c ƒë·ªãnh **anime_genre** (t√™n series, v√≠ d·ª•: "Jujutsu Kaisen") v√† **product_category** (lo·∫°i s·∫£n ph·∫©m, v√≠ d·ª•: "M√≥c kh√≥a", "Figure"). S·ª≠ d·ª•ng 'title' v√† 'haravan_collections' ƒë·ªÉ l√†m vi·ªác n√†y. To√†n b·ªô ph√¢n t√≠ch sau ƒë√≥ ph·∫£i d·ª±a tr√™n k·∫øt qu·∫£ ph√¢n lo·∫°i n√†y.

**B·ªêI C·∫¢NH:**
- **C·ª≠a h√†ng:** Chuy√™n b√°n ƒë·ªì anime.
- **N·ªÅn t·∫£ng:** Haravan, c√≥ h·ªá th·ªëng ph√¢n h·∫°ng th√†nh vi√™n t·ª± ƒë·ªông.
- **M·ª•c ti√™u:** T·ªëi ƒëa h√≥a l·ª£i nhu·∫≠n, tƒÉng tr∆∞·ªüng b·ªÅn v·ªØng.
- **R√†ng bu·ªôc:** M·ªçi ƒë·ªÅ xu·∫•t khuy·∫øn m√£i ph·∫£i ƒë·∫£m b·∫£o bi√™n l·ª£i nhu·∫≠n trung b√¨nh l√† 30%. N·∫øu gi·∫£m, ph·∫£i n√™u r√µ r·ªßi ro v√† c√°ch b√π ƒë·∫Øp.

**NHI·ªÜM V·ª§:**
D·ª±a tr√™n to√†n b·ªô d·ªØ li·ªáu, h√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi chi·∫øn l∆∞·ª£c sau v√† tr√¨nh b√†y k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON duy nh·∫•t.

**C√ÅC C√ÇU H·ªéI CHI·∫æN L∆Ø·ª¢C:**
1.  **S·ª©c kh·ªèe t·ªïng th·ªÉ:** T√¨nh h√¨nh kinh doanh hi·ªán t·∫°i ra sao? ƒê√¢u l√† ƒëi·ªÉm s√°ng v√† r·ªßi ro l·ªõn nh·∫•t?
2.  **D√≤ng ti·ªÅn:** C√≥ l√†nh m·∫°nh kh√¥ng? C√°c kho·∫£n chi s·∫Øp t·ªõi c√≥ ƒë√°ng lo kh√¥ng? C·∫ßn l√†m g√¨ ngay?
3.  **S·∫£n ph·∫©m:** Danh m·ª•c s·∫£n ph·∫©m c√≥ "kh·ªèe" kh√¥ng? ƒê√¢u l√† "ng√¥i sao", "con b√≤ s·ªØa", "d·∫•u h·ªèi" v√† "g√°nh n·∫∑ng"?
4.  **Kh√°ch h√†ng:** V√≤ng ƒë·ªùi kh√°ch h√†ng ƒëang ·ªü ƒë√¢u? Ph√¢n kh√∫c n√†o gi√° tr·ªã nh·∫•t? Ph√¢n kh√∫c n√†o b·ªã b·ªè qu√™n?
5.  **C∆° h·ªôi tƒÉng tr∆∞·ªüng:** ƒê√¢u l√† 2-3 c∆° h·ªôi l·ªõn nh·∫•t trong 30 ng√†y t·ªõi?

---
**D·ªÆ LI·ªÜU ƒê·∫¶U V√ÄO:**

- **D·ªØ li·ªáu t√†i ch√≠nh & m·ª•c ti√™u:**
  - B√°o c√°o ng√†y ${new Date(selectedReportDateString).toLocaleDateString('vi-VN')}: Doanh thu ${reportDataForAI.total_revenue.toLocaleString('vi-VN')}ƒë, L·ª£i nhu·∫≠n ${reportDataForAI.total_profit.toLocaleString('vi-VN')}ƒë.
  - Ghi ch√∫ t·ª´ ch·ªß shop: "${reportDataForAI.notes}"
  - Chi ph√≠ c·ªë ƒë·ªãnh th√°ng (∆∞·ªõc t√≠nh): ${((settings?.monthly_rent_cost || 0) + (settings?.monthly_staff_cost || 0) + (settings?.monthly_marketing_cost || 0) + (settings?.monthly_other_cost || 0)).toLocaleString('vi-VN')}ƒë.
  - M·ª•c ti√™u l·ª£i nhu·∫≠n th√°ng: ${(settings?.monthly_profit_target || 0).toLocaleString('vi-VN')}ƒë.
  - C√°c kho·∫£n chi l·ªõn s·∫Øp t·ªõi: ${JSON.stringify(upcomingEvents.map(e => ({ name: e.event_name, amount: e.amount, due_date: e.due_date.toLocaleDateString('vi-VN') })))}.

- **D·ªØ li·ªáu s·∫£n ph·∫©m (TH√î - c·∫ßn b·∫°n t·ª± ph√¢n lo·∫°i):**
  - Chi ti·∫øt to√†n b·ªô s·∫£n ph·∫©m (bao g·ªìm title, haravan_collections, t·ªìn kho, v·ªën t·ªìn kho, s·ªë l∆∞·ª£ng b√°n g·∫ßn ƒë√¢y, t√¨nh tr·∫°ng b√°n ch·∫≠m): ${JSON.stringify(productDetailsForAI)}.

- **D·ªØ li·ªáu kh√°ch h√†ng (ƒë√£ l√†m gi√†u):**
  - Chi ti·∫øt to√†n b·ªô kh√°ch h√†ng (bao g·ªìm h·∫°ng th√†nh vi√™n, s·ªë ng√†y t·ª´ l·∫ßn mua cu·ªëi, ph√¢n kh√∫c h√†nh vi): ${JSON.stringify(customerDetailsForAI)}.

- **D·ªØ li·ªáu ph·ªÖu b√°n h√†ng & marketing:**
  - Chi ti·∫øt 5 gi·ªè h√†ng b·ªã b·ªè qu√™n c√≥ gi√° tr·ªã cao nh·∫•t (7 ng√†y qua): ${JSON.stringify(abandonedCheckoutsForAI)}.
  - Danh s√°ch c√°c m√£ coupon ƒëang c√≥: ${JSON.stringify(existingCouponsForAI)}.

---
**Y√äU C·∫¶U ƒê·∫¶U RA: M·ªòT ƒê·ªêI T∆Ø·ª¢NG JSON HO√ÄN CH·ªàNH. KH√îNG TH√äM B·∫§T K·ª≤ VƒÇN B·∫¢N N√ÄO B√äN NGO√ÄI KH·ªêI JSON.**

\`\`\`json
{
  "strategic_summary": {
    "report_date": "${new Date(selectedReportDateString).toLocaleDateString('vi-VN')}",
    "headline": "Ti√™u ƒë·ªÅ ch√≠nh t√≥m t·∫Øt to√†n b·ªô t√¨nh h√¨nh trong m·ªôt c√¢u. V√≠ d·ª•: 'Doanh thu ·ªïn ƒë·ªãnh nh∆∞ng r·ªßi ro d√≤ng ti·ªÅn v√† h√†ng t·ªìn kho c·∫ßn x·ª≠ l√Ω ngay'.",
    "overall_health_score": "ƒê√°nh gi√° s·ª©c kh·ªèe t·ªïng th·ªÉ tr√™n thang ƒëi·ªÉm 10 (v√≠ d·ª•: 7.5/10).",
    "key_highlight": "ƒêi·ªÉm s√°ng l·ªõn nh·∫•t c·∫ßn ph√°t huy. V√≠ d·ª•: 'Nh√≥m s·∫£n ph·∫©m Jujutsu Kaisen ƒëang l√† c·ªó m√°y ki·∫øm ti·ªÅn ch√≠nh.'",
    "critical_risk": "R·ªßi ro l·ªõn nh·∫•t c·∫ßn gi·∫£i quy·∫øt. V√≠ d·ª•: 'L∆∞·ª£ng h√†ng t·ªìn kho b√°n ch·∫≠m tr·ªã gi√° X VND ƒëang ƒë√® n·∫∑ng l√™n d√≤ng ti·ªÅn.'"
  },
  "deep_dive_analysis": [
    {
      "area": "Financial Health & Cash Flow",
      "insight": "Ph√¢n t√≠ch s√¢u v·ªÅ d√≤ng ti·ªÅn. So s√°nh doanh thu trung b√¨nh v·ªõi chi ph√≠ s·∫Øp t·ªõi. ƒê∆∞a ra k·∫øt lu·∫≠n v·ªÅ s·ª± an to√†n t√†i ch√≠nh trong 30 ng√†y t·ªõi.",
      "recommendation": "ƒê·ªÅ xu·∫•t c·ª• th·ªÉ ƒë·ªÉ c·∫£i thi·ªán. V√≠ d·ª•: 'C·∫ßn tƒÉng doanh thu h√†ng ng√†y th√™m X VND ho·∫∑c tr√¨ ho√£n kho·∫£n chi Y.'"
    },
    {
      "area": "Product Portfolio Performance",
      "insight": "X√°c ƒë·ªãnh c√°c nh√≥m s·∫£n ph·∫©m 'Ng√¥i sao', 'Con b√≤ s·ªØa', 'D·∫•u h·ªèi', 'G√°nh n·∫∑ng'. Ph√¢n t√≠ch nh√≥m anime_genre n√†o ƒëang ho·∫°t ƒë·ªông hi·ªáu qu·∫£ nh·∫•t v√† lo·∫°i product_category n√†o ƒëang y·∫øu th·∫ø trong nh√≥m ƒë√≥.",
      "recommendation": "ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c cho t·ª´ng nh√≥m. V√≠ d·ª•: 'Nh√¢n ƒë√¥i ng√¢n s√°ch marketing cho c√°c s·∫£n ph·∫©m Jujutsu Kaisen. T·∫°o combo x·∫£ h√†ng cho c√°c s·∫£n ph·∫©m b√°n ch·∫≠m.'"
    },
    {
      "area": "Customer Lifecycle & CRM",
      "insight": "Ph√¢n t√≠ch hi·ªáu qu·∫£ c·ªßa vi·ªác gi·ªØ ch√¢n kh√°ch h√†ng. H·∫°ng th√†nh vi√™n n√†o c√≥ gi√° tr·ªã v√≤ng ƒë·ªùi cao nh·∫•t? C√≥ bao nhi√™u kh√°ch h√†ng ƒëang trong tr·∫°ng th√°i 'At Risk' (c√≥ nguy c∆° r·ªùi b·ªè)?",
      "recommendation": "ƒê·ªÅ xu·∫•t chi·∫øn d·ªãch cho t·ª´ng giai ƒëo·∫°n. V√≠ d·ª•: 'T·∫°o chi·∫øn d·ªãch 'We miss you' v·ªõi ∆∞u ƒë√£i ƒë·∫∑c bi·ªát cho nh√≥m 'At Risk'. Tri·ªÉn khai ch∆∞∆°ng tr√¨nh gi·ªõi thi·ªáu b·∫°n b√® cho nh√≥m kh√°ch h√†ng trung th√†nh.'"
    }
  ],
  "actionable_growth_plan": {
    "title": "K·∫ø ho·∫°ch TƒÉng tr∆∞·ªüng 30 Ng√†y T·ªõi",
    "initiatives": [
      {
        "priority": "Critical (∆Øu ti√™n 1)",
        "initiative_name": "Gi·∫£i quy·∫øt h√†ng t·ªìn kho & T·ªëi ∆∞u d√≤ng ti·ªÅn",
        "description": "Chi·∫øn d·ªãch c·ª• th·ªÉ ƒë·ªÉ x·ª≠ l√Ω c√°c s·∫£n ph·∫©m 'G√°nh n·∫∑ng' ƒë√£ x√°c ƒë·ªãnh ·ªü tr√™n.",
        "steps": [
          "B∆∞·ªõc 1: T·∫°o ch∆∞∆°ng tr√¨nh 'Flash Sale cu·ªëi tu·∫ßn' cho 5 s·∫£n ph·∫©m b√°n ch·∫≠m nh·∫•t, gi·∫£m gi√° X% (t√≠nh to√°n ƒë·ªÉ v·∫´n h√≤a v·ªën ho·∫∑c l·ªó t·ªëi thi·ªÉu).",
          "B∆∞·ªõc 2: T·∫°o c√°c 'Combo B√≠ ·∫®n' g·ªìm 1 s·∫£n ph·∫©m b√°n ch·∫°y + 1 s·∫£n ph·∫©m b√°n ch·∫≠m v·ªõi gi√° ∆∞u ƒë√£i.",
          "B∆∞·ªõc 3: Li√™n h·ªá c√°c kh√°ch h√†ng ƒë√£ t·ª´ng mua s·∫£n ph·∫©m t∆∞∆°ng t·ª± ƒë·ªÉ gi·ªõi thi·ªáu tr·ª±c ti·∫øp."
        ],
        "kpi": "Gi·∫£m 50% gi√° tr·ªã t·ªìn kho c·ªßa c√°c s·∫£n ph·∫©m b√°n ch·∫≠m trong 2 tu·∫ßn. Thu v·ªÅ t·ªëi thi·ªÉu Y VND ti·ªÅn m·∫∑t."
      },
      {
        "priority": "High (∆Øu ti√™n 2)",
        "initiative_name": "Chi·∫øn d·ªãch gi·ªØ ch√¢n kh√°ch h√†ng 'At Risk'",
        "description": "T√°i k√≠ch ho·∫°t c√°c kh√°ch h√†ng ƒë√£ kh√¥ng mua s·∫Øm trong h∆°n 90 ng√†y.",
        "steps": [
          "B∆∞·ªõc 1: G·ª≠i email c√° nh√¢n h√≥a v·ªõi ti√™u ƒë·ªÅ '[T√™n kh√°ch h√†ng], ƒë√£ l√¢u kh√¥ng g·∫∑p! Shop c√≥ qu√† cho b·∫°n n√®'.",
          "B∆∞·ªõc 2: T·∫∑ng m·ªôt m√£ gi·∫£m gi√° 15% kh√¥ng y√™u c·∫ßu gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu, ch·ªâ d√†nh ri√™ng cho h·ªç.",
          "B∆∞·ªõc 3: Gi·ªõi thi·ªáu c√°c s·∫£n ph·∫©m m·ªõi thu·ªôc anime_genre m√† h·ªç t·ª´ng mua."
        ],
        "kpi": "T·ª∑ l·ªá m·ªü email > 25%. T·ª∑ l·ªá chuy·ªÉn ƒë·ªïi t·ª´ chi·∫øn d·ªãch > 5%."
      },
      {
        "priority": "Medium (∆Øu ti√™n 3)",
        "initiative_name": "T·ªëi ∆∞u Ph·ªÖu b√°n h√†ng - C·ª©u gi·ªè h√†ng",
        "description": "Tri·ªÉn khai chi·∫øn d·ªãch t·ª± ƒë·ªông ƒë·ªÉ c·ª©u c√°c gi·ªè h√†ng b·ªã b·ªè qu√™n c√≥ gi√° tr·ªã cao.",
        "steps": [
          "B∆∞·ªõc 1: Thi·∫øt l·∫≠p lu·ªìng email t·ª± ƒë·ªông g·ª≠i sau 2 gi·ªù kh√°ch b·ªè qu√™n gi·ªè h√†ng.",
          "B∆∞·ªõc 2: Email ƒë·∫ßu ti√™n ch·ªâ nh·∫Øc nh·ªü. Email th·ª© hai sau 24 gi·ªù s·∫Ω k√®m m√£ gi·∫£m gi√° 10% ho·∫∑c freeship.",
          "B∆∞·ªõc 3: Test A/B ti√™u ƒë·ªÅ email ƒë·ªÉ t√¨m ra c√¢u ch·ªØ hi·ªáu qu·∫£ nh·∫•t."
        ],
        "kpi": "TƒÉng t·ª∑ l·ªá c·ª©u gi·ªè h√†ng th√†nh c√¥ng l√™n 15%."
      }
    ]
  }
}
\`\`\`
`;

        // B∆Ø·ªöC 3: G·ªåI AI V√Ä X·ª¨ L√ù K·∫æT QU·∫¢
        const result = await geminiModelInstance.generateContent(prompt);
        const response = await result.response;
        const textResponse = response.text();
        
        console.log('Ph·∫£n h·ªìi RAW t·ª´ C·ªë v·∫•n Chi·∫øn l∆∞·ª£c AI:', textResponse);

        let analysisResultJson;
        try {
            // C·∫£i thi·ªán kh·∫£ nƒÉng parse JSON, ∆∞u ti√™n t√¨m kh·ªëi ```json
            const jsonBlockMatch = textResponse.match(/```json\n([\s\S]*?)\n```/);
            if (jsonBlockMatch && jsonBlockMatch[1]) {
                const jsonString = jsonBlockMatch[1].trim();
                analysisResultJson = JSON.parse(jsonString);
            } else {
                // Fallback n·∫øu kh√¥ng c√≥ kh·ªëi ```json, th·ª≠ parse to√†n b·ªô
                analysisResultJson = JSON.parse(textResponse);
            }
        } catch (parseError) {
            console.error('‚ùå L·ªói parsing JSON t·ª´ C·ªë v·∫•n Chi·∫øn l∆∞·ª£c AI:', parseError.message);
            return res.status(500).json({
                message: 'L·ªói parsing ph·∫£n h·ªìi AI. Ph·∫£n h·ªìi kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá.',
                rawResponse: textResponse
            });
        }

        // B∆Ø·ªöC 4: L∆ØU K·∫æT QU·∫¢ V√ÄO DB
        await DailyReport.findOneAndUpdate(
            { report_date: queryDateForDailyReport },
            { $set: { ai_analysis_results: analysisResultJson } },
            { upsert: true, new: true, setDefaultsOnInsert: true }
        );
        console.log(`‚úÖ [Strategic AI] ƒê√£ l∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch chi·∫øn l∆∞·ª£c v√†o b√°o c√°o ng√†y ${queryDateForDailyReport.toLocaleDateString('vi-VN')}.`);

        res.status(200).json(analysisResultJson);

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch chi·∫øn l∆∞·ª£c:', error);
        // Ph√¢n t√≠ch l·ªói c·ª• th·ªÉ h∆°n t·ª´ Google
        if (error.message && error.message.includes('429')) {
             return res.status(429).json({ message: 'L·ªói t·ª´ Gemini: V∆∞·ª£t qu√° gi·ªõi h·∫°n truy c·∫≠p (rate limit). C√≥ th·ªÉ do prompt qu√° l·ªõn. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c gi·∫£m ph·∫°m vi d·ªØ li·ªáu.', error: error.message });
        }
        res.status(500).json({ message: 'L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch chi·∫øn l∆∞·ª£c.', error: error.message });
    }
}

// =========================================================================
// H√ÄM ƒê·ªÇ L·∫§Y B√ÅO C√ÅO H√ÄNG NG√ÄY THEO NG√ÄY
// =========================================================================
const getDailyReportByDate = async (req, res) => {
    const dateParam = req.query.date;

    if (!dateParam) {
        return res.status(400).json({ message: 'Thi·∫øu tham s·ªë ng√†y (date).' });
    }

    try {
        const queryDate = new Date(dateParam);
        queryDate.setUTCHours(0,0,0,0);

        const report = await DailyReport.findOne({ report_date: queryDate }).lean();

        if (!report) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b√°o c√°o cho ng√†y n√†y.' });
        }

        res.status(200).json(report);
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y b√°o c√°o theo ng√†y:', error);
        res.status(500).json({ message: 'L·ªói khi l·∫•y b√°o c√°o theo ng√†y.', error: error.message });
    }
};

// =========================================================================
// H√ÄM X·ª¨ L√ù AI CHAT TR·ª∞C TI·∫æP
// =========================================================================
const handleChat = async (req, res) => {
    console.log('üí¨ [AI Chat] Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn m·ªõi...');
    if (!geminiModelInstance) {
        return res.status(503).json({ message: "D·ªãch v·ª• AI kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh GEMINI_API_KEY." });
    }

    const { sessionId, message, initialContext } = req.body;

    if (!sessionId || !message) {
        return res.status(400).json({ message: "Thi·∫øu sessionId ho·∫∑c tin nh·∫Øn." });
    }

    try {
        let chatSessionDoc = await ChatSession.findOne({ sessionId });
        let history = [];

        if (chatSessionDoc) {
            history = chatSessionDoc.history;
            console.log(`üí¨ [AI Chat] ƒê√£ t·∫£i l·ªãch s·ª≠ cho session ${sessionId} (${history.length} tin nh·∫Øn).`);
        } else {
            if (initialContext) {
                history.push({
                    role: 'user',
                    parts: [{ text: `B·∫Øt ƒë·∫ßu phi√™n t∆∞ v·∫•n. D∆∞·ªõi ƒë√¢y l√† b·ªëi c·∫£nh t·ª´ b·∫£n ph√¢n t√≠ch kinh doanh m√† b·∫°n ƒë√£ t·∫°o. H√£y ƒë√≥ng vai tr√≤ l√† c·ªë v·∫•n chi·∫øn l∆∞·ª£c v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi c·ªßa t√¥i d·ª±a tr√™n d·ªØ li·ªáu n√†y.` }]
                });
                history.push({
                    role: 'model',
                    parts: [{ text: `R·∫•t s·∫µn l√≤ng. T√¥i ƒë√£ xem x√©t b·∫£n ph√¢n t√≠ch chi ti·∫øt: \n\`\`\`json\n${JSON.stringify(initialContext, null, 2)}\n\`\`\`\n. B·∫°n mu·ªën ƒëi s√¢u v√†o v·∫•n ƒë·ªÅ n√†o ƒë·∫ßu ti√™n?` }]
                });
                console.log(`üí¨ [AI Chat] T·∫°o session m·ªõi ${sessionId} v·ªõi context ban ƒë·∫ßu.`);
            } else {
                console.log(`üí¨ [AI Chat] T·∫°o session m·ªõi ${sessionId} (kh√¥ng c√≥ context ban ƒë·∫ßu).`);
            }
            chatSessionDoc = new ChatSession({ sessionId, history });
        }

        const chat = geminiModelInstance.startChat({
            history: history,
            generationConfig: {
                maxOutputTokens: 2048,
            },
        });

        const result = await chat.sendMessage(message);
        const modelResponseText = result.response.text();

        chatSessionDoc.history.push({ role: 'user', parts: [{ text: message }] });
        chatSessionDoc.history.push({ role: 'model', parts: [{ text: modelResponseText }] });
        chatSessionDoc.lastActivity = new Date();
        await chatSessionDoc.save();

        console.log(`üí¨ [AI Chat] Tr·∫£ l·ªùi cho session ${sessionId}: ${modelResponseText.substring(0, 50)}...`);
        res.status(200).json({ response: modelResponseText, sessionId: sessionId });

    } catch (error) {
        console.error('‚ùå [AI Chat] L·ªói x·ª≠ l√Ω chat:', error);
        res.status(500).json({ message: "L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω chat AI.", error: error.message, sessionId: sessionId });
    }
}

module.exports = {
    analyzeOverallBusiness,
    getDailyReportByDate,
    handleChat
};

