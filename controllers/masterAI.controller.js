// controllers/masterAI.controller.js

// ... (c√°c ph·∫ßn import, GEMINI_API_KEY, getProductCategorization, analyzeOverallBusiness gi·ªØ nguy√™n) ...

// =========================================================================
// S·ª¨A L·ªñI: handleChat ƒë·ªÉ ƒë·∫£m b·∫£o l·ªãch s·ª≠ b·∫Øt ƒë·∫ßu v·ªõi 'user'
// =========================================================================
async function handleChat(req, res) {
    console.log('üí¨ [AI Chat] Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn m·ªõi...');
    if (!geminiModelInstance) {
        return res.status(503).json({ message: "D·ªãch v·ª• AI kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh GEMINI_API_KEY." });
    }

    const { sessionId, message, initialContext } = req.body;

    if (!sessionId || !message) {
        return res.status(400).json({ message: "Thi·∫øu sessionId ho·∫∑c tin nh·∫Øn." });
    }

    try {
        let chatSessionDoc = await ChatSession.findOne({ sessionId });
        let history = [];

        if (chatSessionDoc) {
            history = chatSessionDoc.history;
            console.log(`üí¨ [AI Chat] ƒê√£ t·∫£i l·ªãch s·ª≠ cho session ${sessionId} (${history.length} tin nh·∫Øn).`);
        } else {
            // N·∫øu l√† phi√™n m·ªõi, v√† c√≥ initialContext (k·∫øt qu·∫£ ph√¢n t√≠ch Master AI)
            if (initialContext) {
                // THAY ƒê·ªîI QUAN TR·ªåNG ·ªû ƒê√ÇY:
                // Th√™m m·ªôt tin nh·∫Øn gi·∫£ l·∫≠p t·ª´ 'user' tr∆∞·ªõc context c·ªßa 'model'
                // ƒë·ªÉ tu√¢n th·ªß quy t·∫Øc c·ªßa Gemini API (b·∫Øt ƒë·∫ßu b·∫±ng user)
                history.push({
                    role: 'user', 
                    parts: [{ text: 'Ch√†o AI, t√¥i v·ª´a nh·∫≠n ƒë∆∞·ª£c m·ªôt b·∫£n ph√¢n t√≠ch kinh doanh. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m chi ti·∫øt v·ªÅ n√≥ kh√¥ng?' }]
                });
                history.push({
                    role: 'model', 
                    parts: [{ text: `Ch√†o b·∫°n! D∆∞·ªõi ƒë√¢y l√† b·∫£n ph√¢n t√≠ch m√† t√¥i ƒë√£ t·∫°o: \n\`\`\`json\n${JSON.stringify(initialContext, null, 2)}\n\`\`\`\n` }]
                });
                console.log(`üí¨ [AI Chat] T·∫°o session m·ªõi ${sessionId} v·ªõi context ban ƒë·∫ßu ƒë√£ ch·ªânh s·ª≠a.`);
            } else {
                console.log(`üí¨ [AI Chat] T·∫°o session m·ªõi ${sessionId} (kh√¥ng c√≥ context ban ƒë·∫ßu).`);
            }
            chatSessionDoc = new ChatSession({ sessionId, history });
        }
        
        const chat = geminiModelInstance.startChat({
            history: history,
            generationConfig: {
                maxOutputTokens: 2048, 
            },
        });

        // 3. G·ª≠i tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√† nh·∫≠n ph·∫£n h·ªìi
        const result = await chat.sendMessage(message);
        const modelResponseText = result.response.text();

        // 4. C·∫≠p nh·∫≠t l·ªãch s·ª≠ chat v√† l∆∞u v√†o DB
        chatSessionDoc.history.push({ role: 'user', parts: [{ text: message }] });
        chatSessionDoc.history.push({ role: 'model', parts: [{ text: modelResponseText }] });
        chatSessionDoc.lastActivity = new Date(); 
        await chatSessionDoc.save();

        console.log(`üí¨ [AI Chat] Tr·∫£ l·ªùi cho session ${sessionId}: ${modelResponseText.substring(0, 50)}...`);
        res.status(200).json({ response: modelResponseText, sessionId: sessionId });

    } catch (error) {
        console.error('‚ùå [AI Chat] L·ªói x·ª≠ l√Ω chat:', error);
        res.status(500).json({ message: "L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω chat AI.", error: error.message, sessionId: sessionId });
    }
}


// Export t·∫•t c·∫£ c√°c h√†m ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng trong router
module.exports = {
    analyzeOverallBusiness,
    handleChat 
};
