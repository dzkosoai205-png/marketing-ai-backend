// ==========================================================
// File: controllers/analysis.controller.js
// Phi√™n b·∫£n n√†y ƒë√£ lo·∫°i b·ªè date-fns-tz v√† t√≠nh gi·ªù th·ªß c√¥ng.
// ==========================================================

const Order = require('../models/order.model');
const Product = require('../models/product.model');

async function getDailyFinancials(req, res) {
  try {
    console.log('üìä B·∫Øt ƒë·∫ßu ph√¢n t√≠ch t√†i ch√≠nh trong ng√†y...');
    
    // --- T√çNH TO√ÅN M√öI GI·ªú VI·ªÜT NAM TH·ª¶ C√îNG ---
    const now = new Date(); // L·∫•y gi·ªù UTC hi·ªán t·∫°i c·ªßa server
    const vietnamOffset = 7 * 60 * 60 * 1000; // 7 gi·ªù t√≠nh b·∫±ng mili gi√¢y
    
    // T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng Date m·ªõi cho gi·ªù Vi·ªát Nam
    const nowInVietnam = new Date(now.getTime() + vietnamOffset);

    // ƒê·∫∑t gi·ªù v·ªÅ ƒë·∫ßu ng√†y (00:00:00) theo gi·ªù Vi·ªát Nam
    const todayStartInVietnam = new Date(nowInVietnam);
    todayStartInVietnam.setUTCHours(0, 0, 0, 0);

    // ƒê·∫∑t gi·ªù v·ªÅ cu·ªëi ng√†y (23:59:59) theo gi·ªù Vi·ªát Nam
    const todayEndInVietnam = new Date(nowInVietnam);
    todayEndInVietnam.setUTCHours(23, 59, 59, 999);

    console.log(`- L·∫•y ƒë∆°n h√†ng trong kho·∫£ng UTC: ${todayStartInVietnam.toISOString()} ƒë·∫øn ${todayEndInVietnam.toISOString()}`);

    // T√¨m t·∫•t c·∫£ c√°c ƒë∆°n h√†ng ƒë√£ thanh to√°n trong ng√†y h√¥m nay
    // D·ªØ li·ªáu created_at_haravan trong DB ƒë∆∞·ª£c l∆∞u d∆∞·ªõi d·∫°ng UTC, n√™n so s√°nh tr·ª±c ti·∫øp
    const todaysPaidOrders = await Order.find({
      financial_status: 'paid',
      created_at_haravan: {
        $gte: todayStartInVietnam,
        $lte: todayEndInVietnam
      }
    });

    if (todaysPaidOrders.length === 0) {
      return res.status(200).json({ 
        message: 'Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒë∆∞·ª£c thanh to√°n h√¥m nay.',
        totalRevenue: 0, totalCOGS: 0, grossProfit: 0,
        cashRevenue: 0, transferRevenue: 0, orderCount: 0
      });
    }

    const variantIds = todaysPaidOrders.flatMap(order => 
      order.line_items.map(item => item.variant_id)
    );
    
    const productsInOrders = await Product.find({ 'variants.id': { $in: variantIds } });
    
    const variantCostMap = new Map();
    productsInOrders.forEach(p => {
        p.variants.forEach(v => {
            if (variantIds.includes(v.id)) {
                variantCostMap.set(v.id, v.cost_price || 0);
            }
        });
    });
    console.log(`- ƒê√£ t√¨m th·∫•y gi√° v·ªën cho ${variantCostMap.size} lo·∫°i s·∫£n ph·∫©m.`);

    let totalRevenue = 0;
    let totalCOGS = 0;
    let cashRevenue = 0;
    let transferRevenue = 0;

    todaysPaidOrders.forEach(order => {
      totalRevenue += order.total_price;

      if (order.gateway === 'cod' || (order.gateway || '').toLowerCase().includes('ti·ªÅn m·∫∑t')) {
          cashRevenue += order.total_price;
      } else {
          transferRevenue += order.total_price;
      }

      order.line_items.forEach(item => {
        const cost = variantCostMap.get(item.variant_id) || 0;
        if(cost === 0) {
            console.warn(`‚ö†Ô∏è C·∫£nh b√°o: S·∫£n ph·∫©m "${item.title}" (Variant ID: ${item.variant_id}) kh√¥ng c√≥ gi√° v·ªën.`);
        }
        totalCOGS += cost * item.quantity;
      });
    });

    const grossProfit = totalRevenue - totalCOGS;

    console.log(`‚úÖ Ph√¢n t√≠ch t√†i ch√≠nh ho√†n t·∫•t.`);
    res.status(200).json({
      totalRevenue,
      totalCOGS,
      grossProfit,
      cashRevenue,
      transferRevenue,
      orderCount: todaysPaidOrders.length
    });

  } catch (error) {
    console.error('‚ùå L·ªói khi ph√¢n t√≠ch t√†i ch√≠nh:', error);
    res.status(500).json({ message: 'L·ªói khi ph√¢n t√≠ch t√†i ch√≠nh.', error: error.message });
  }
}

module.exports = {
  getDailyFinancials
};
