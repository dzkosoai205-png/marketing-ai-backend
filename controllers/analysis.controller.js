// ==========================================================
// File: controllers/analysis.controller.js
// Phi√™n b·∫£n n√†y ƒë√£ s·ª≠a l·ªói TypeError khi g·ªçi h√†m th·ªùi gian.
// ==========================================================

const Order = require('../models/order.model');
const Product = require('../models/product.model');
const { utcToZonedTime, zonedTimeToUtc, format } = require('date-fns-tz'); // <-- THAY ƒê·ªîI C√ÅCH IMPORT

/**
 * Controller ƒë·ªÉ ph√¢n t√≠ch v√† tr·∫£ v·ªÅ b√°o c√°o t√†i ch√≠nh trong ng√†y.
 */
async function getDailyFinancials(req, res) {
  try {
    console.log('üìä B·∫Øt ƒë·∫ßu ph√¢n t√≠ch t√†i ch√≠nh trong ng√†y...');
    
    // --- S·ª¨A L·ªñI M√öI GI·ªú ---
    const timeZone = 'Asia/Ho_Chi_Minh';
    const nowInVietnam = utcToZonedTime(new Date(), timeZone); // <-- S·ª¨A C√ÅCH G·ªåI H√ÄM
    
    const todayStartInVietnam = new Date(nowInVietnam);
    todayStartInVietnam.setHours(0, 0, 0, 0);

    const todayEndInVietnam = new Date(nowInVietnam);
    todayEndInVietnam.setHours(23, 59, 59, 999);

    // Chuy·ªÉn ƒë·ªïi v·ªÅ gi·ªù UTC ƒë·ªÉ truy v·∫•n MongoDB
    const todayStartUtc = zonedTimeToUtc(todayStartInVietnam, timeZone); // <-- S·ª¨A C√ÅCH G·ªåI H√ÄM
    const todayEndUtc = zonedTimeToUtc(todayEndInVietnam, timeZone); // <-- S·ª¨A C√ÅCH G·ªåI H√ÄM

    console.log(`- L·∫•y ƒë∆°n h√†ng t·ª´ ${format(todayStartInVietnam, 'yyyy-MM-dd HH:mm:ss zzz', { timeZone })} ƒë·∫øn ${format(todayEndInVietnam, 'yyyy-MM-dd HH:mm:ss zzz', { timeZone })}`); // <-- S·ª¨A C√ÅCH G·ªåI H√ÄM

    // T√¨m t·∫•t c·∫£ c√°c ƒë∆°n h√†ng ƒë√£ thanh to√°n trong ng√†y h√¥m nay (theo gi·ªù Vi·ªát Nam)
    const todaysPaidOrders = await Order.find({
      financial_status: 'paid',
      created_at_haravan: {
        $gte: todayStartUtc,
        $lte: todayEndUtc
      }
    });

    if (todaysPaidOrders.length === 0) {
      return res.status(200).json({ 
        message: 'Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒë∆∞·ª£c thanh to√°n h√¥m nay.',
        totalRevenue: 0,
        totalCOGS: 0,
        grossProfit: 0,
        cashRevenue: 0,
        transferRevenue: 0,
        orderCount: 0
      });
    }

    // L·∫•y danh s√°ch t·∫•t c·∫£ variant ID t·ª´ c√°c ƒë∆°n h√†ng
    const variantIds = todaysPaidOrders.flatMap(order => 
      order.line_items.map(item => item.variant_id)
    );
    
    // L·∫•y th√¥ng tin s·∫£n ph·∫©m (bao g·ªìm gi√° v·ªën) t·ª´ database
    const productsInOrders = await Product.find({ 'variants.id': { $in: variantIds } });
    
    // T·∫°o m·ªôt "map" ƒë·ªÉ tra c·ª©u gi√° v·ªën nhanh h∆°n
    const variantCostMap = new Map();
    productsInOrders.forEach(p => {
        p.variants.forEach(v => {
            // Ch·ªâ th√™m v√†o map n·∫øu variant n√†y c√≥ trong c√°c ƒë∆°n h√†ng h√¥m nay
            if (variantIds.includes(v.id)) {
                variantCostMap.set(v.id, v.cost || 0);
            }
        });
    });
    console.log(`- ƒê√£ t√¨m th·∫•y gi√° v·ªën cho ${variantCostMap.size} lo·∫°i s·∫£n ph·∫©m.`);

    let totalRevenue = 0;
    let totalCOGS = 0; // Cost of Goods Sold - Gi√° v·ªën h√†ng b√°n
    let cashRevenue = 0;
    let transferRevenue = 0;

    todaysPaidOrders.forEach(order => {
      totalRevenue += order.total_price;

      // Ph√¢n lo·∫°i doanh thu theo c·ªïng thanh to√°n
      if (order.gateway === 'cod' || (order.gateway || '').toLowerCase().includes('ti·ªÅn m·∫∑t')) {
          cashRevenue += order.total_price;
      } else {
          transferRevenue += order.total_price;
      }

      // T√≠nh t·ªïng gi√° v·ªën cho ƒë∆°n h√†ng
      order.line_items.forEach(item => {
        const cost = variantCostMap.get(item.variant_id) || 0;
        if(cost === 0) {
            console.warn(`‚ö†Ô∏è C·∫£nh b√°o: S·∫£n ph·∫©m "${item.title}" (Variant ID: ${item.variant_id}) kh√¥ng c√≥ gi√° v·ªën. L·ª£i nhu·∫≠n c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c.`);
        }
        totalCOGS += cost * item.quantity;
      });
    });

    const grossProfit = totalRevenue - totalCOGS; // L·ª£i nhu·∫≠n g·ªôp

    console.log(`‚úÖ Ph√¢n t√≠ch t√†i ch√≠nh ho√†n t·∫•t.`);
    res.status(200).json({
      totalRevenue,
      totalCOGS,
      grossProfit,
      cashRevenue,
      transferRevenue,
      orderCount: todaysPaidOrders.length
    });

  } catch (error) {
    console.error('‚ùå L·ªói khi ph√¢n t√≠ch t√†i ch√≠nh:', error);
    res.status(500).json({ message: 'L·ªói khi ph√¢n t√≠ch t√†i ch√≠nh.', error: error.message });
  }
}

module.exports = {
  getDailyFinancials
};
